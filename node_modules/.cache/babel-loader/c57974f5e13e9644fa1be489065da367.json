{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, ref, provide, watch, unref, nextTick, onMounted, onBeforeUnmount, renderSlot } from 'vue';\nimport { isNil } from 'lodash-unified';\nimport '../../../constants/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { useFocusReason, getEdges, createFocusOutPreventedEvent, tryFocus, focusableStack, focusFirstDescendant, obtainAllFocusableElements, isFocusCausedByUserEvent } from './utils.mjs';\nimport { ON_TRAP_FOCUS_EVT, ON_RELEASE_FOCUS_EVT, FOCUS_TRAP_INJECTION_KEY, FOCUS_AFTER_TRAPPED, FOCUS_AFTER_TRAPPED_OPTS, FOCUS_AFTER_RELEASED } from './tokens.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useEscapeKeydown } from '../../../hooks/use-escape-keydown/index.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { isString } from '@vue/shared';\n\nconst _sfc_main = defineComponent({\n  name: \"ElFocusTrap\",\n  inheritAttrs: false,\n  props: {\n    loop: Boolean,\n    trapped: Boolean,\n    focusTrapEl: Object,\n    focusStartEl: {\n      type: [Object, String],\n      default: \"first\"\n    }\n  },\n  emits: [ON_TRAP_FOCUS_EVT, ON_RELEASE_FOCUS_EVT, \"focusin\", \"focusout\", \"focusout-prevented\", \"release-requested\"],\n\n  setup(props, {\n    emit\n  }) {\n    const forwardRef = ref();\n    let lastFocusBeforeTrapped;\n    let lastFocusAfterTrapped;\n    const {\n      focusReason\n    } = useFocusReason();\n    useEscapeKeydown(event => {\n      if (props.trapped && !focusLayer.paused) {\n        emit(\"release-requested\", event);\n      }\n    });\n    const focusLayer = {\n      paused: false,\n\n      pause() {\n        this.paused = true;\n      },\n\n      resume() {\n        this.paused = false;\n      }\n\n    };\n\n    const onKeydown = e => {\n      if (!props.loop && !props.trapped) return;\n      if (focusLayer.paused) return;\n      const {\n        key,\n        altKey,\n        ctrlKey,\n        metaKey,\n        currentTarget,\n        shiftKey\n      } = e;\n      const {\n        loop\n      } = props;\n      const isTabbing = key === EVENT_CODE.tab && !altKey && !ctrlKey && !metaKey;\n      const currentFocusingEl = document.activeElement;\n\n      if (isTabbing && currentFocusingEl) {\n        const container = currentTarget;\n        const [first, last] = getEdges(container);\n        const isTabbable = first && last;\n\n        if (!isTabbable) {\n          if (currentFocusingEl === container) {\n            const focusoutPreventedEvent = createFocusOutPreventedEvent({\n              focusReason: focusReason.value\n            });\n            emit(\"focusout-prevented\", focusoutPreventedEvent);\n\n            if (!focusoutPreventedEvent.defaultPrevented) {\n              e.preventDefault();\n            }\n          }\n        } else {\n          if (!shiftKey && currentFocusingEl === last) {\n            const focusoutPreventedEvent = createFocusOutPreventedEvent({\n              focusReason: focusReason.value\n            });\n            emit(\"focusout-prevented\", focusoutPreventedEvent);\n\n            if (!focusoutPreventedEvent.defaultPrevented) {\n              e.preventDefault();\n              if (loop) tryFocus(first, true);\n            }\n          } else if (shiftKey && [first, container].includes(currentFocusingEl)) {\n            const focusoutPreventedEvent = createFocusOutPreventedEvent({\n              focusReason: focusReason.value\n            });\n            emit(\"focusout-prevented\", focusoutPreventedEvent);\n\n            if (!focusoutPreventedEvent.defaultPrevented) {\n              e.preventDefault();\n              if (loop) tryFocus(last, true);\n            }\n          }\n        }\n      }\n    };\n\n    provide(FOCUS_TRAP_INJECTION_KEY, {\n      focusTrapRef: forwardRef,\n      onKeydown\n    });\n    watch(() => props.focusTrapEl, focusTrapEl => {\n      if (focusTrapEl) {\n        forwardRef.value = focusTrapEl;\n      }\n    }, {\n      immediate: true\n    });\n    watch([forwardRef], ([forwardRef2], [oldForwardRef]) => {\n      if (forwardRef2) {\n        forwardRef2.addEventListener(\"keydown\", onKeydown);\n        forwardRef2.addEventListener(\"focusin\", onFocusIn);\n        forwardRef2.addEventListener(\"focusout\", onFocusOut);\n      }\n\n      if (oldForwardRef) {\n        oldForwardRef.removeEventListener(\"keydown\", onKeydown);\n        oldForwardRef.removeEventListener(\"focusin\", onFocusIn);\n        oldForwardRef.removeEventListener(\"focusout\", onFocusOut);\n      }\n    });\n\n    const trapOnFocus = e => {\n      emit(ON_TRAP_FOCUS_EVT, e);\n    };\n\n    const releaseOnFocus = e => emit(ON_RELEASE_FOCUS_EVT, e);\n\n    const onFocusIn = e => {\n      const trapContainer = unref(forwardRef);\n      if (!trapContainer) return;\n      const target = e.target;\n      const relatedTarget = e.relatedTarget;\n      const isFocusedInTrap = target && trapContainer.contains(target);\n\n      if (!props.trapped) {\n        const isPrevFocusedInTrap = relatedTarget && trapContainer.contains(relatedTarget);\n\n        if (!isPrevFocusedInTrap) {\n          lastFocusBeforeTrapped = relatedTarget;\n        }\n      }\n\n      if (isFocusedInTrap) emit(\"focusin\", e);\n      if (focusLayer.paused) return;\n\n      if (props.trapped) {\n        if (isFocusedInTrap) {\n          lastFocusAfterTrapped = target;\n        } else {\n          tryFocus(lastFocusAfterTrapped, true);\n        }\n      }\n    };\n\n    const onFocusOut = e => {\n      const trapContainer = unref(forwardRef);\n      if (focusLayer.paused || !trapContainer) return;\n\n      if (props.trapped) {\n        const relatedTarget = e.relatedTarget;\n\n        if (!isNil(relatedTarget) && !trapContainer.contains(relatedTarget)) {\n          setTimeout(() => {\n            if (!focusLayer.paused && props.trapped) {\n              const focusoutPreventedEvent = createFocusOutPreventedEvent({\n                focusReason: focusReason.value\n              });\n              emit(\"focusout-prevented\", focusoutPreventedEvent);\n\n              if (!focusoutPreventedEvent.defaultPrevented) {\n                tryFocus(lastFocusAfterTrapped, true);\n              }\n            }\n          }, 0);\n        }\n      } else {\n        const target = e.target;\n        const isFocusedInTrap = target && trapContainer.contains(target);\n        if (!isFocusedInTrap) emit(\"focusout\", e);\n      }\n    };\n\n    async function startTrap() {\n      await nextTick();\n      const trapContainer = unref(forwardRef);\n\n      if (trapContainer) {\n        focusableStack.push(focusLayer);\n        const prevFocusedElement = trapContainer.contains(document.activeElement) ? lastFocusBeforeTrapped : document.activeElement;\n        lastFocusBeforeTrapped = prevFocusedElement;\n        const isPrevFocusContained = trapContainer.contains(prevFocusedElement);\n\n        if (!isPrevFocusContained) {\n          const focusEvent = new Event(FOCUS_AFTER_TRAPPED, FOCUS_AFTER_TRAPPED_OPTS);\n          trapContainer.addEventListener(FOCUS_AFTER_TRAPPED, trapOnFocus);\n          trapContainer.dispatchEvent(focusEvent);\n\n          if (!focusEvent.defaultPrevented) {\n            nextTick(() => {\n              let focusStartEl = props.focusStartEl;\n\n              if (!isString(focusStartEl)) {\n                tryFocus(focusStartEl);\n\n                if (document.activeElement !== focusStartEl) {\n                  focusStartEl = \"first\";\n                }\n              }\n\n              if (focusStartEl === \"first\") {\n                focusFirstDescendant(obtainAllFocusableElements(trapContainer), true);\n              }\n\n              if (document.activeElement === prevFocusedElement || focusStartEl === \"container\") {\n                tryFocus(trapContainer);\n              }\n            });\n          }\n        }\n      }\n    }\n\n    function stopTrap() {\n      const trapContainer = unref(forwardRef);\n\n      if (trapContainer) {\n        trapContainer.removeEventListener(FOCUS_AFTER_TRAPPED, trapOnFocus);\n        const releasedEvent = new CustomEvent(FOCUS_AFTER_RELEASED, { ...FOCUS_AFTER_TRAPPED_OPTS,\n          detail: {\n            focusReason: focusReason.value\n          }\n        });\n        trapContainer.addEventListener(FOCUS_AFTER_RELEASED, releaseOnFocus);\n        trapContainer.dispatchEvent(releasedEvent);\n\n        if (!releasedEvent.defaultPrevented && (focusReason.value == \"keyboard\" || !isFocusCausedByUserEvent())) {\n          tryFocus(lastFocusBeforeTrapped != null ? lastFocusBeforeTrapped : document.body, true);\n        }\n\n        trapContainer.removeEventListener(FOCUS_AFTER_RELEASED, trapOnFocus);\n        focusableStack.remove(focusLayer);\n      }\n    }\n\n    onMounted(() => {\n      if (props.trapped) {\n        startTrap();\n      }\n\n      watch(() => props.trapped, trapped => {\n        if (trapped) {\n          startTrap();\n        } else {\n          stopTrap();\n        }\n      });\n    });\n    onBeforeUnmount(() => {\n      if (props.trapped) {\n        stopTrap();\n      }\n    });\n    return {\n      onKeydown\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return renderSlot(_ctx.$slots, \"default\", {\n    handleKeydown: _ctx.onKeydown\n  });\n}\n\nvar ElFocusTrap = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/focus-trap/src/focus-trap.vue\"]]);\n\nexport { ElFocusTrap as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","inheritAttrs","props","loop","trapped","focusTrapEl","focusStartEl","type","Object","String","default","emits","ON_TRAP_FOCUS_EVT","ON_RELEASE_FOCUS_EVT","setup","emit","forwardRef","ref","focusReason","useFocusReason","useEscapeKeydown","event","focusLayer","paused","pause","resume","e","key","altKey","ctrlKey","metaKey","currentTarget","shiftKey","EVENT_CODE","currentFocusingEl","document","isTabbing","container","first","last","getEdges","isTabbable","focusoutPreventedEvent","createFocusOutPreventedEvent","defaultPrevented","preventDefault","tryFocus","includes","provide","FOCUS_TRAP_INJECTION_KEY","focusTrapRef","onKeydown","watch","value","immediate","forwardRef2","oldForwardRef","onFocusIn","onFocusOut","releaseOnFocus","unref","trapContainer","target","relatedTarget","isFocusedInTrap","isPrevFocusedInTrap","lastFocusBeforeTrapped","lastFocusAfterTrapped","isNil","setTimeout","nextTick","focusableStack","push","prevFocusedElement","activeElement","isPrevFocusContained","focusEvent","Event","FOCUS_AFTER_TRAPPED","FOCUS_AFTER_TRAPPED_OPTS","trapOnFocus","dispatchEvent","isString","focusFirstDescendant","CustomEvent","FOCUS_AFTER_RELEASED","detail","releasedEvent","isFocusCausedByUserEvent","remove","onMounted","startTrap","stopTrap","onBeforeUnmount","_renderSlot","handleKeydown","_ctx"],"sources":["../../../../../../packages/components/focus-trap/src/focus-trap.vue"],"sourcesContent":["<template>\n  <slot :handle-keydown=\"onKeydown\" />\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  nextTick,\n  onBeforeUnmount,\n  onMounted,\n  provide,\n  ref,\n  unref,\n  watch,\n} from 'vue'\nimport { isNil } from 'lodash-unified'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { useEscapeKeydown } from '@element-plus/hooks'\nimport { isString } from '@element-plus/utils'\nimport {\n  createFocusOutPreventedEvent,\n  focusFirstDescendant,\n  focusableStack,\n  getEdges,\n  isFocusCausedByUserEvent,\n  obtainAllFocusableElements,\n  tryFocus,\n  useFocusReason,\n} from './utils'\nimport {\n  FOCUS_AFTER_RELEASED,\n  FOCUS_AFTER_TRAPPED,\n  FOCUS_AFTER_TRAPPED_OPTS,\n  FOCUS_TRAP_INJECTION_KEY,\n  ON_RELEASE_FOCUS_EVT,\n  ON_TRAP_FOCUS_EVT,\n} from './tokens'\n\nimport type { PropType } from 'vue'\nimport type { FocusLayer } from './utils'\n\nexport default defineComponent({\n  name: 'ElFocusTrap',\n  inheritAttrs: false,\n  props: {\n    loop: Boolean,\n    trapped: Boolean,\n    focusTrapEl: Object as PropType<HTMLElement>,\n    focusStartEl: {\n      type: [Object, String] as PropType<'container' | 'first' | HTMLElement>,\n      default: 'first',\n    },\n  },\n  emits: [\n    ON_TRAP_FOCUS_EVT,\n    ON_RELEASE_FOCUS_EVT,\n    'focusin',\n    'focusout',\n    'focusout-prevented',\n    'release-requested',\n  ],\n  setup(props, { emit }) {\n    const forwardRef = ref<HTMLElement | undefined>()\n    let lastFocusBeforeTrapped: HTMLElement | null\n    let lastFocusAfterTrapped: HTMLElement | null\n\n    const { focusReason } = useFocusReason()\n\n    useEscapeKeydown((event) => {\n      if (props.trapped && !focusLayer.paused) {\n        emit('release-requested', event)\n      }\n    })\n\n    const focusLayer: FocusLayer = {\n      paused: false,\n      pause() {\n        this.paused = true\n      },\n      resume() {\n        this.paused = false\n      },\n    }\n\n    const onKeydown = (e: KeyboardEvent) => {\n      if (!props.loop && !props.trapped) return\n      if (focusLayer.paused) return\n\n      const { key, altKey, ctrlKey, metaKey, currentTarget, shiftKey } = e\n      const { loop } = props\n      const isTabbing =\n        key === EVENT_CODE.tab && !altKey && !ctrlKey && !metaKey\n\n      const currentFocusingEl = document.activeElement\n      if (isTabbing && currentFocusingEl) {\n        const container = currentTarget as HTMLElement\n        const [first, last] = getEdges(container)\n        const isTabbable = first && last\n        if (!isTabbable) {\n          if (currentFocusingEl === container) {\n            const focusoutPreventedEvent = createFocusOutPreventedEvent({\n              focusReason: focusReason.value,\n            })\n            emit('focusout-prevented', focusoutPreventedEvent)\n            if (!focusoutPreventedEvent.defaultPrevented) {\n              e.preventDefault()\n            }\n          }\n        } else {\n          if (!shiftKey && currentFocusingEl === last) {\n            const focusoutPreventedEvent = createFocusOutPreventedEvent({\n              focusReason: focusReason.value,\n            })\n            emit('focusout-prevented', focusoutPreventedEvent)\n            if (!focusoutPreventedEvent.defaultPrevented) {\n              e.preventDefault()\n              if (loop) tryFocus(first, true)\n            }\n          } else if (\n            shiftKey &&\n            [first, container].includes(currentFocusingEl as HTMLElement)\n          ) {\n            const focusoutPreventedEvent = createFocusOutPreventedEvent({\n              focusReason: focusReason.value,\n            })\n            emit('focusout-prevented', focusoutPreventedEvent)\n            if (!focusoutPreventedEvent.defaultPrevented) {\n              e.preventDefault()\n              if (loop) tryFocus(last, true)\n            }\n          }\n        }\n      }\n    }\n\n    provide(FOCUS_TRAP_INJECTION_KEY, {\n      focusTrapRef: forwardRef,\n      onKeydown,\n    })\n\n    watch(\n      () => props.focusTrapEl,\n      (focusTrapEl) => {\n        if (focusTrapEl) {\n          forwardRef.value = focusTrapEl\n        }\n      },\n      { immediate: true }\n    )\n\n    watch([forwardRef], ([forwardRef], [oldForwardRef]) => {\n      if (forwardRef) {\n        forwardRef.addEventListener('keydown', onKeydown)\n        forwardRef.addEventListener('focusin', onFocusIn)\n        forwardRef.addEventListener('focusout', onFocusOut)\n      }\n      if (oldForwardRef) {\n        oldForwardRef.removeEventListener('keydown', onKeydown)\n        oldForwardRef.removeEventListener('focusin', onFocusIn)\n        oldForwardRef.removeEventListener('focusout', onFocusOut)\n      }\n    })\n\n    const trapOnFocus = (e: Event) => {\n      emit(ON_TRAP_FOCUS_EVT, e)\n    }\n    const releaseOnFocus = (e: Event) => emit(ON_RELEASE_FOCUS_EVT, e)\n\n    const onFocusIn = (e: FocusEvent) => {\n      const trapContainer = unref(forwardRef)\n      if (!trapContainer) return\n\n      const target = e.target as HTMLElement | null\n      const relatedTarget = e.relatedTarget as HTMLElement | null\n      const isFocusedInTrap = target && trapContainer.contains(target)\n\n      if (!props.trapped) {\n        const isPrevFocusedInTrap =\n          relatedTarget && trapContainer.contains(relatedTarget)\n        if (!isPrevFocusedInTrap) {\n          lastFocusBeforeTrapped = relatedTarget\n        }\n      }\n\n      if (isFocusedInTrap) emit('focusin', e)\n\n      if (focusLayer.paused) return\n\n      if (props.trapped) {\n        if (isFocusedInTrap) {\n          lastFocusAfterTrapped = target\n        } else {\n          tryFocus(lastFocusAfterTrapped, true)\n        }\n      }\n    }\n\n    const onFocusOut = (e: Event) => {\n      const trapContainer = unref(forwardRef)\n      if (focusLayer.paused || !trapContainer) return\n\n      if (props.trapped) {\n        const relatedTarget = (e as FocusEvent)\n          .relatedTarget as HTMLElement | null\n        if (!isNil(relatedTarget) && !trapContainer.contains(relatedTarget)) {\n          // Give embedded focus layer time to pause this layer before reclaiming focus\n          // And only reclaim focus if it should currently be trapping\n          setTimeout(() => {\n            if (!focusLayer.paused && props.trapped) {\n              const focusoutPreventedEvent = createFocusOutPreventedEvent({\n                focusReason: focusReason.value,\n              })\n              emit('focusout-prevented', focusoutPreventedEvent)\n              if (!focusoutPreventedEvent.defaultPrevented) {\n                tryFocus(lastFocusAfterTrapped, true)\n              }\n            }\n          }, 0)\n        }\n      } else {\n        const target = e.target as HTMLElement | null\n        const isFocusedInTrap = target && trapContainer.contains(target)\n        if (!isFocusedInTrap) emit('focusout', e)\n      }\n    }\n\n    async function startTrap() {\n      // Wait for forwardRef to resolve\n      await nextTick()\n      const trapContainer = unref(forwardRef)\n      if (trapContainer) {\n        focusableStack.push(focusLayer)\n        const prevFocusedElement = trapContainer.contains(\n          document.activeElement\n        )\n          ? lastFocusBeforeTrapped\n          : document.activeElement\n        lastFocusBeforeTrapped = prevFocusedElement as HTMLElement | null\n        const isPrevFocusContained = trapContainer.contains(prevFocusedElement)\n        if (!isPrevFocusContained) {\n          const focusEvent = new Event(\n            FOCUS_AFTER_TRAPPED,\n            FOCUS_AFTER_TRAPPED_OPTS\n          )\n          trapContainer.addEventListener(FOCUS_AFTER_TRAPPED, trapOnFocus)\n          trapContainer.dispatchEvent(focusEvent)\n          if (!focusEvent.defaultPrevented) {\n            nextTick(() => {\n              let focusStartEl = props.focusStartEl\n              if (!isString(focusStartEl)) {\n                tryFocus(focusStartEl)\n                if (document.activeElement !== focusStartEl) {\n                  focusStartEl = 'first'\n                }\n              }\n              if (focusStartEl === 'first') {\n                focusFirstDescendant(\n                  obtainAllFocusableElements(trapContainer),\n                  true\n                )\n              }\n              if (\n                document.activeElement === prevFocusedElement ||\n                focusStartEl === 'container'\n              ) {\n                tryFocus(trapContainer)\n              }\n            })\n          }\n        }\n      }\n    }\n\n    function stopTrap() {\n      const trapContainer = unref(forwardRef)\n\n      if (trapContainer) {\n        trapContainer.removeEventListener(FOCUS_AFTER_TRAPPED, trapOnFocus)\n\n        const releasedEvent = new CustomEvent(FOCUS_AFTER_RELEASED, {\n          ...FOCUS_AFTER_TRAPPED_OPTS,\n          detail: {\n            focusReason: focusReason.value,\n          },\n        })\n        trapContainer.addEventListener(FOCUS_AFTER_RELEASED, releaseOnFocus)\n        trapContainer.dispatchEvent(releasedEvent)\n\n        if (\n          !releasedEvent.defaultPrevented &&\n          (focusReason.value == 'keyboard' || !isFocusCausedByUserEvent())\n        ) {\n          tryFocus(lastFocusBeforeTrapped ?? document.body, true)\n        }\n\n        trapContainer.removeEventListener(FOCUS_AFTER_RELEASED, trapOnFocus)\n        focusableStack.remove(focusLayer)\n      }\n    }\n\n    onMounted(() => {\n      if (props.trapped) {\n        startTrap()\n      }\n\n      watch(\n        () => props.trapped,\n        (trapped) => {\n          if (trapped) {\n            startTrap()\n          } else {\n            stopTrap()\n          }\n        }\n      )\n    })\n\n    onBeforeUnmount(() => {\n      if (props.trapped) {\n        stopTrap()\n      }\n    })\n\n    return {\n      onKeydown,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}