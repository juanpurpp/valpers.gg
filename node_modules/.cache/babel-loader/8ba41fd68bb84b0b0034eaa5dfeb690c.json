{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, inject, ref, computed, unref, watch, onMounted, provide, openBlock, createElementBlock, normalizeStyle, normalizeClass, renderSlot, createVNode, withCtx, Fragment, createTextVNode, toDisplayString, createCommentVNode } from 'vue';\nimport { offset } from '@floating-ui/dom';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../visual-hidden/index.mjs';\nimport { tooltipV2ContentProps } from './content.mjs';\nimport { tooltipV2CommonProps } from './common.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { tooltipV2RootKey, tooltipV2ContentKey } from '../../../tokens/tooltip-v2.mjs';\nimport { useFloating, arrowMiddleware } from '../../../hooks/use-floating/index.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport ElVisuallyHidden from '../../visual-hidden/src/visual-hidden2.mjs';\nconst _hoisted_1 = [\"data-side\"];\n\nconst __default__ = defineComponent({\n  name: \"ElTooltipV2Content\"\n});\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: { ...tooltipV2ContentProps,\n    ...tooltipV2CommonProps\n  },\n\n  setup(__props) {\n    const props = __props;\n    const {\n      triggerRef,\n      contentId\n    } = inject(tooltipV2RootKey);\n    const placement = ref(props.placement);\n    const strategy = ref(props.strategy);\n    const arrowRef = ref(null);\n    const {\n      referenceRef,\n      contentRef,\n      middlewareData,\n      x,\n      y,\n      update\n    } = useFloating({\n      placement,\n      strategy,\n      middleware: computed(() => {\n        const middleware = [offset(props.offset)];\n\n        if (props.showArrow) {\n          middleware.push(arrowMiddleware({\n            arrowRef\n          }));\n        }\n\n        return middleware;\n      })\n    });\n    const zIndex = useZIndex().nextZIndex();\n    const ns = useNamespace(\"tooltip-v2\");\n    const side = computed(() => {\n      return placement.value.split(\"-\")[0];\n    });\n    const contentStyle = computed(() => {\n      return {\n        position: unref(strategy),\n        top: `${unref(y) || 0}px`,\n        left: `${unref(x) || 0}px`,\n        zIndex\n      };\n    });\n    const arrowStyle = computed(() => {\n      if (!props.showArrow) return {};\n      const {\n        arrow\n      } = unref(middlewareData);\n      return {\n        [`--${ns.namespace.value}-tooltip-v2-arrow-x`]: `${arrow == null ? void 0 : arrow.x}px` || \"\",\n        [`--${ns.namespace.value}-tooltip-v2-arrow-y`]: `${arrow == null ? void 0 : arrow.y}px` || \"\"\n      };\n    });\n    const contentClass = computed(() => [ns.e(\"content\"), ns.is(\"dark\", props.effect === \"dark\"), ns.is(unref(strategy)), props.contentClass]);\n    watch(arrowRef, () => update());\n    watch(() => props.placement, val => placement.value = val);\n    onMounted(() => {\n      watch(() => props.reference || triggerRef.value, el => {\n        referenceRef.value = el || void 0;\n      }, {\n        immediate: true\n      });\n    });\n    provide(tooltipV2ContentKey, {\n      arrowRef\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        ref_key: \"contentRef\",\n        ref: contentRef,\n        style: normalizeStyle(unref(contentStyle)),\n        \"data-tooltip-v2-root\": \"\"\n      }, [!_ctx.nowrap ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        \"data-side\": unref(side),\n        class: normalizeClass(unref(contentClass))\n      }, [renderSlot(_ctx.$slots, \"default\", {\n        contentStyle: unref(contentStyle),\n        contentClass: unref(contentClass)\n      }), createVNode(unref(ElVisuallyHidden), {\n        id: unref(contentId),\n        role: \"tooltip\"\n      }, {\n        default: withCtx(() => [_ctx.ariaLabel ? (openBlock(), createElementBlock(Fragment, {\n          key: 0\n        }, [createTextVNode(toDisplayString(_ctx.ariaLabel), 1)], 64)) : renderSlot(_ctx.$slots, \"default\", {\n          key: 1\n        })]),\n        _: 3\n      }, 8, [\"id\"]), renderSlot(_ctx.$slots, \"arrow\", {\n        style: normalizeStyle(unref(arrowStyle)),\n        side: unref(side)\n      })], 10, _hoisted_1)) : createCommentVNode(\"v-if\", true)], 4);\n    };\n  }\n\n});\n\nvar TooltipV2Content = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tooltip-v2/src/content.vue\"]]);\n\nexport { TooltipV2Content as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;mCAgCc;EACZA,IAAM;AADM;;;;;;;;;IAMd,MAAM;MAAEC,UAAF;MAAcC;IAAd,IAA4BC,OAAOC,gBAAP,CAAlC;IAEM,kBAAYC,GAAI,OAAMC,SAAN,CAAhB;IACA,iBAAWD,GAAI,OAAME,QAAN,CAAf;IACA,iBAAWF,IAAwB,IAAxB,CAAX;IAEN,MAAM;MAAEG,YAAF;MAAgBC,UAAhB;MAA4BC,cAA5B;MAA4CC,CAA5C;MAA+CC,CAA/C;MAAkDC;IAAlD,IAA6DC,WAAY;MAC7ER,SAD6E;MAE7EC,QAF6E;MAG7EQ,YAAYC,SAAS,MAAM;QACzB,MAAMD,UAA2B,IAACE,MAAO,OAAMA,MAAN,CAAR,CAAjC;;QAEA,IAAIC,MAAMC,SAAV,EAAqB;UACnBJ,WAAWK,IAAX,CACEC,eAAgB;YACdC;UADc,EADlB;QAKF;;QAEO;MACR,CAZW;IAHiE,EAA/E;IAkBM,eAASC,SAAU,GAAEC,UAAZ,EAAT;IAEA,WAAKC,aAAa,YAAb,CAAL;IAEA,aAAOT,SAAS,MAAM;MAC1B,OAAOV,SAAU,MAAV,CAAgBoB,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAP;IACD,CAFY,CAAP;IAIA,qBAAeV,SAAwB,MAAM;MAC1C;QACLW,UAAUC,MAAMrB,QAAN,CADL;QAELsB,GAAK,KAAGD,KAAM,GAAN,IAAY,KAFf;QAGLE,IAAM,KAAGF,KAAM,GAAN,IAAY,KAHhB;QAILG;MAJK;IAMR,CAPoB,CAAf;IASA,mBAAaf,SAAwB,MAAM;MAC/C,IAAI,CAACE,KAAM,UAAX,EAAsB,OAAO,EAAP;MAEhB;QAAEc;MAAF,IAAYJ,MAAMlB,cAAN,CAAZ;MAEC;QACL,CAAM,QAAGuB,SAAH,CAAaC,KAA6B,qBAAhD,GAAgD,GAAGF,SAAgB,IAAhB,GAAgB,MAAhB,GAAgBA,WAAnB,IAAmB,EAD9D;QAEL,CAAM,QAAGC,SAAH,CAAaC,KAA6B,qBAAhD,GAAgD,GAAGF,SAAgB,IAAhB,GAAgB,MAAhB,GAAgBA,WAAnB,IAAmB;MAF9D;IAIR,CATkB,CAAb;IAWA,qBAAehB,SAAS,MAAM,CAClCmB,GAAGC,CAAH,CAAK,SAAL,CADkC,EAElCD,EAAG,GAAH,CAAM,MAAN,EAAcjB,MAAMmB,MAAN,KAAiB,MAA/B,CAFkC,EAGlCF,EAAG,GAAH,CAAMP,KAAM,UAAZ,CAHkC,EAIlCV,KAAM,aAJ4B,CAAf,CAAf;IAOAoB,gBAAU,MAAMzB,QAAhB;IAENyB,MACE,MAAMpB,KAAM,UADd,EAEGqB,GAAD,IAAUjC,UAAU4B,KAAV,GAAkBK,GAF9B;IAKAC,UAAU,MAAM;MACdF,MACE,MAAMpB,KAAM,UAAN,IAAmBjB,UAAW,MADtC,EAEGwC,EAAD,IAAQ;QACNjC,aAAa0B,KAAb,GAAqBO,EAAM,UAA3B;MAEF,CALF,EAKE;QACEC,SAAW;MADb,CALF;IASD,CAVD;IAYQC,6BAAqB;MAAErB;IAAF,CAArB","names":["name","triggerRef","contentId","inject","tooltipV2RootKey","ref","placement","strategy","referenceRef","contentRef","middlewareData","x","y","update","useFloating","middleware","computed","offset","props","showArrow","push","arrowMiddleware","arrowRef","useZIndex","nextZIndex","useNamespace","split","position","unref","top","left","zIndex","arrow","namespace","value","ns","e","effect","watch","val","onMounted","el","immediate","provide"],"sources":["../../../../../../packages/components/tooltip-v2/src/content.vue"],"sourcesContent":["<template>\n  <div ref=\"contentRef\" :style=\"contentStyle\" data-tooltip-v2-root>\n    <div v-if=\"!nowrap\" :data-side=\"side\" :class=\"contentClass\">\n      <slot :content-style=\"contentStyle\" :content-class=\"contentClass\" />\n      <el-visually-hidden :id=\"contentId\" role=\"tooltip\">\n        <template v-if=\"ariaLabel\">\n          {{ ariaLabel }}\n        </template>\n        <slot v-else />\n      </el-visually-hidden>\n      <slot name=\"arrow\" :style=\"arrowStyle\" :side=\"side\" />\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, inject, onMounted, provide, ref, unref, watch } from 'vue'\nimport { offset } from '@floating-ui/dom'\nimport { tooltipV2ContentKey, tooltipV2RootKey } from '@element-plus/tokens'\nimport {\n  arrowMiddleware,\n  useFloating,\n  useNamespace,\n  useZIndex,\n} from '@element-plus/hooks'\nimport ElVisuallyHidden from '@element-plus/components/visual-hidden'\nimport { tooltipV2ContentProps } from './content'\nimport { tooltipV2CommonProps } from './common'\n\nimport type { CSSProperties } from 'vue'\nimport type { Middleware } from '@floating-ui/dom'\n\ndefineOptions({\n  name: 'ElTooltipV2Content',\n})\n\nconst props = defineProps({ ...tooltipV2ContentProps, ...tooltipV2CommonProps })\n\nconst { triggerRef, contentId } = inject(tooltipV2RootKey)!\n\nconst placement = ref(props.placement)\nconst strategy = ref(props.strategy)\nconst arrowRef = ref<HTMLElement | null>(null)\n\nconst { referenceRef, contentRef, middlewareData, x, y, update } = useFloating({\n  placement,\n  strategy,\n  middleware: computed(() => {\n    const middleware: Middleware[] = [offset(props.offset)]\n\n    if (props.showArrow) {\n      middleware.push(\n        arrowMiddleware({\n          arrowRef,\n        })\n      )\n    }\n\n    return middleware\n  }),\n})\n\nconst zIndex = useZIndex().nextZIndex()\n\nconst ns = useNamespace('tooltip-v2')\n\nconst side = computed(() => {\n  return placement.value.split('-')[0]\n})\n\nconst contentStyle = computed<CSSProperties>(() => {\n  return {\n    position: unref(strategy),\n    top: `${unref(y) || 0}px`,\n    left: `${unref(x) || 0}px`,\n    zIndex,\n  }\n})\n\nconst arrowStyle = computed<CSSProperties>(() => {\n  if (!props.showArrow) return {}\n\n  const { arrow } = unref(middlewareData)\n\n  return {\n    [`--${ns.namespace.value}-tooltip-v2-arrow-x`]: `${arrow?.x}px` || '',\n    [`--${ns.namespace.value}-tooltip-v2-arrow-y`]: `${arrow?.y}px` || '',\n  }\n})\n\nconst contentClass = computed(() => [\n  ns.e('content'),\n  ns.is('dark', props.effect === 'dark'),\n  ns.is(unref(strategy)),\n  props.contentClass,\n])\n\nwatch(arrowRef, () => update())\n\nwatch(\n  () => props.placement,\n  (val) => (placement.value = val)\n)\n\nonMounted(() => {\n  watch(\n    () => props.reference || triggerRef.value,\n    (el) => {\n      referenceRef.value = el || undefined\n    },\n    {\n      immediate: true,\n    }\n  )\n})\n\nprovide(tooltipV2ContentKey, { arrowRef })\n</script>\n"]},"metadata":{},"sourceType":"module"}