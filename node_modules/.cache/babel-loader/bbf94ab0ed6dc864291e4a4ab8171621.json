{"ast":null,"code":"import { defineComponent, ref, reactive, computed, nextTick, onMounted, watch, provide, openBlock, createBlock, unref, withCtx, withDirectives, createElementBlock, createElementVNode, normalizeClass, createVNode, createCommentVNode, withKeys, createTextVNode, toDisplayString, normalizeStyle, vShow } from 'vue';\nimport { debounce } from 'lodash-unified';\nimport { ElButton } from '../../button/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport { ArrowDown, Close } from '@element-plus/icons-vue';\nimport AlphaSlider from './components/alpha-slider.mjs';\nimport HueSlider from './components/hue-slider.mjs';\nimport Predefine from './components/predefine.mjs';\nimport SvPanel from './components/sv-panel.mjs';\nimport Color from './utils/color.mjs';\nimport { colorPickerProps, colorPickerEmits, colorPickerContextKey } from './color-picker2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useFormItem, useFormItemInputId } from '../../../hooks/use-form-item/index.mjs';\nimport { useSize, useDisabled } from '../../../hooks/use-common-props/index.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nconst _hoisted_1 = [\"id\", \"aria-label\", \"aria-labelledby\", \"aria-description\", \"tabindex\", \"onKeydown\"];\n\nconst __default__ = defineComponent({\n  name: \"ElColorPicker\"\n});\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: colorPickerProps,\n  emits: colorPickerEmits,\n\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"color\");\n    const {\n      formItem\n    } = useFormItem();\n    const colorSize = useSize();\n    const colorDisabled = useDisabled();\n    const {\n      inputId: buttonId,\n      isLabeledByFormItem\n    } = useFormItemInputId(props, {\n      formItemContext: formItem\n    });\n    const hue = ref();\n    const sv = ref();\n    const alpha = ref();\n    const popper = ref();\n    let shouldActiveChange = true;\n    const color = reactive(new Color({\n      enableAlpha: props.showAlpha,\n      format: props.colorFormat || \"\",\n      value: props.modelValue\n    }));\n    const showPicker = ref(false);\n    const showPanelColor = ref(false);\n    const customInput = ref(\"\");\n    const displayedColor = computed(() => {\n      if (!props.modelValue && !showPanelColor.value) {\n        return \"transparent\";\n      }\n\n      return displayedRgb(color, props.showAlpha);\n    });\n    const currentColor = computed(() => {\n      return !props.modelValue && !showPanelColor.value ? \"\" : color.value;\n    });\n    const buttonAriaLabel = computed(() => {\n      return !isLabeledByFormItem.value ? props.label || t(\"el.colorpicker.defaultLabel\") : void 0;\n    });\n    const buttonAriaLabelledby = computed(() => {\n      return isLabeledByFormItem.value ? formItem == null ? void 0 : formItem.labelId : void 0;\n    });\n\n    function displayedRgb(color2, showAlpha) {\n      if (!(color2 instanceof Color)) {\n        throw new TypeError(\"color should be instance of _color Class\");\n      }\n\n      const {\n        r,\n        g,\n        b\n      } = color2.toRgb();\n      return showAlpha ? `rgba(${r}, ${g}, ${b}, ${color2.get(\"alpha\") / 100})` : `rgb(${r}, ${g}, ${b})`;\n    }\n\n    function setShowPicker(value) {\n      showPicker.value = value;\n    }\n\n    const debounceSetShowPicker = debounce(setShowPicker, 100);\n\n    function hide() {\n      debounceSetShowPicker(false);\n      resetColor();\n    }\n\n    function resetColor() {\n      nextTick(() => {\n        if (props.modelValue) {\n          color.fromString(props.modelValue);\n        } else {\n          color.value = \"\";\n          nextTick(() => {\n            showPanelColor.value = false;\n          });\n        }\n      });\n    }\n\n    function handleTrigger() {\n      if (colorDisabled.value) return;\n      debounceSetShowPicker(!showPicker.value);\n    }\n\n    function handleConfirm() {\n      color.fromString(customInput.value);\n    }\n\n    function confirmValue() {\n      const value = color.value;\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(\"change\", value);\n\n      if (props.validateEvent) {\n        formItem == null ? void 0 : formItem.validate(\"change\").catch(err => debugWarn(err));\n      }\n\n      debounceSetShowPicker(false);\n      nextTick(() => {\n        const newColor = new Color({\n          enableAlpha: props.showAlpha,\n          format: props.colorFormat || \"\",\n          value: props.modelValue\n        });\n\n        if (!color.compare(newColor)) {\n          resetColor();\n        }\n      });\n    }\n\n    function clear() {\n      debounceSetShowPicker(false);\n      emit(UPDATE_MODEL_EVENT, null);\n      emit(\"change\", null);\n\n      if (props.modelValue !== null && props.validateEvent) {\n        formItem == null ? void 0 : formItem.validate(\"change\").catch(err => debugWarn(err));\n      }\n\n      resetColor();\n    }\n\n    onMounted(() => {\n      if (props.modelValue) {\n        customInput.value = currentColor.value;\n      }\n    });\n    watch(() => props.modelValue, newVal => {\n      if (!newVal) {\n        showPanelColor.value = false;\n      } else if (newVal && newVal !== color.value) {\n        shouldActiveChange = false;\n        color.fromString(newVal);\n      }\n    });\n    watch(() => currentColor.value, val => {\n      customInput.value = val;\n      shouldActiveChange && emit(\"activeChange\", val);\n      shouldActiveChange = true;\n    });\n    watch(() => color.value, () => {\n      if (!props.modelValue && !showPanelColor.value) {\n        showPanelColor.value = true;\n      }\n    });\n    watch(() => showPicker.value, () => {\n      nextTick(() => {\n        var _a, _b, _c;\n\n        (_a = hue.value) == null ? void 0 : _a.update();\n        (_b = sv.value) == null ? void 0 : _b.update();\n        (_c = alpha.value) == null ? void 0 : _c.update();\n      });\n    });\n    provide(colorPickerContextKey, {\n      currentColor\n    });\n    expose({\n      color\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(unref(ElTooltip), {\n        ref_key: \"popper\",\n        ref: popper,\n        visible: showPicker.value,\n        \"show-arrow\": false,\n        \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n        offset: 0,\n        \"gpu-acceleration\": false,\n        \"popper-class\": [unref(ns).be(\"picker\", \"panel\"), unref(ns).b(\"dropdown\"), _ctx.popperClass],\n        \"stop-popper-mouse-event\": false,\n        effect: \"light\",\n        trigger: \"click\",\n        transition: `${unref(ns).namespace.value}-zoom-in-top`,\n        persistent: \"\"\n      }, {\n        content: withCtx(() => [withDirectives((openBlock(), createElementBlock(\"div\", null, [createElementVNode(\"div\", {\n          class: normalizeClass(unref(ns).be(\"dropdown\", \"main-wrapper\"))\n        }, [createVNode(HueSlider, {\n          ref_key: \"hue\",\n          ref: hue,\n          class: \"hue-slider\",\n          color: unref(color),\n          vertical: \"\"\n        }, null, 8, [\"color\"]), createVNode(SvPanel, {\n          ref: \"svPanel\",\n          color: unref(color)\n        }, null, 8, [\"color\"])], 2), _ctx.showAlpha ? (openBlock(), createBlock(AlphaSlider, {\n          key: 0,\n          ref_key: \"alpha\",\n          ref: alpha,\n          color: unref(color)\n        }, null, 8, [\"color\"])) : createCommentVNode(\"v-if\", true), _ctx.predefine ? (openBlock(), createBlock(Predefine, {\n          key: 1,\n          ref: \"predefine\",\n          color: unref(color),\n          colors: _ctx.predefine\n        }, null, 8, [\"color\", \"colors\"])) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n          class: normalizeClass(unref(ns).be(\"dropdown\", \"btns\"))\n        }, [createElementVNode(\"span\", {\n          class: normalizeClass(unref(ns).be(\"dropdown\", \"value\"))\n        }, [createVNode(unref(ElInput), {\n          modelValue: customInput.value,\n          \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => customInput.value = $event),\n          \"validate-event\": false,\n          size: \"small\",\n          onKeyup: withKeys(handleConfirm, [\"enter\"]),\n          onBlur: handleConfirm\n        }, null, 8, [\"modelValue\", \"onKeyup\"])], 2), createVNode(unref(ElButton), {\n          class: normalizeClass(unref(ns).be(\"dropdown\", \"link-btn\")),\n          text: \"\",\n          size: \"small\",\n          onClick: clear\n        }, {\n          default: withCtx(() => [createTextVNode(toDisplayString(unref(t)(\"el.colorpicker.clear\")), 1)]),\n          _: 1\n        }, 8, [\"class\"]), createVNode(unref(ElButton), {\n          plain: \"\",\n          size: \"small\",\n          class: normalizeClass(unref(ns).be(\"dropdown\", \"btn\")),\n          onClick: confirmValue\n        }, {\n          default: withCtx(() => [createTextVNode(toDisplayString(unref(t)(\"el.colorpicker.confirm\")), 1)]),\n          _: 1\n        }, 8, [\"class\"])], 2)])), [[unref(ClickOutside), hide]])]),\n        default: withCtx(() => [createElementVNode(\"div\", {\n          id: unref(buttonId),\n          class: normalizeClass([unref(ns).b(\"picker\"), unref(ns).is(\"disabled\", unref(colorDisabled)), unref(ns).bm(\"picker\", unref(colorSize))]),\n          role: \"button\",\n          \"aria-label\": unref(buttonAriaLabel),\n          \"aria-labelledby\": unref(buttonAriaLabelledby),\n          \"aria-description\": unref(t)(\"el.colorpicker.description\", {\n            color: _ctx.modelValue || \"\"\n          }),\n          tabindex: _ctx.tabindex,\n          onKeydown: withKeys(handleTrigger, [\"enter\"])\n        }, [unref(colorDisabled) ? (openBlock(), createElementBlock(\"div\", {\n          key: 0,\n          class: normalizeClass(unref(ns).be(\"picker\", \"mask\"))\n        }, null, 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n          class: normalizeClass(unref(ns).be(\"picker\", \"trigger\")),\n          onClick: handleTrigger\n        }, [createElementVNode(\"span\", {\n          class: normalizeClass([unref(ns).be(\"picker\", \"color\"), unref(ns).is(\"alpha\", _ctx.showAlpha)])\n        }, [createElementVNode(\"span\", {\n          class: normalizeClass(unref(ns).be(\"picker\", \"color-inner\")),\n          style: normalizeStyle({\n            backgroundColor: unref(displayedColor)\n          })\n        }, [withDirectives(createVNode(unref(ElIcon), {\n          class: normalizeClass([unref(ns).be(\"picker\", \"icon\"), unref(ns).is(\"icon-arrow-down\")])\n        }, {\n          default: withCtx(() => [createVNode(unref(ArrowDown))]),\n          _: 1\n        }, 8, [\"class\"]), [[vShow, _ctx.modelValue || showPanelColor.value]]), !_ctx.modelValue && !showPanelColor.value ? (openBlock(), createBlock(unref(ElIcon), {\n          key: 0,\n          class: normalizeClass([unref(ns).be(\"picker\", \"empty\"), unref(ns).is(\"icon-close\")])\n        }, {\n          default: withCtx(() => [createVNode(unref(Close))]),\n          _: 1\n        }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 6)], 2)], 2)], 42, _hoisted_1)]),\n        _: 1\n      }, 8, [\"visible\", \"popper-class\", \"transition\"]);\n    };\n  }\n\n});\n\nvar ColorPicker = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/color-picker.vue\"]]);\n\nexport { ColorPicker as default };","map":{"version":3,"mappings":"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","names":["name","t","useLocale","useNamespace","formItem","useFormItem","colorSize","useSize","colorDisabled","useDisabled","inputId","buttonId","isLabeledByFormItem","useFormItemInputId","props","formItemContext","hue","ref","sv","alpha","popper","shouldActiveChange","reactive","Color","enableAlpha","format","colorFormat","value","computed","modelValue","showPanelColor","color","showAlpha","label","color2","TypeError","r","g","b","toRgb","get","showPicker","debounce","debounceSetShowPicker","resetColor","nextTick","customInput","emit","UPDATE_MODEL_EVENT","validateEvent","validate","catch","err","compare","newColor","onMounted","currentColor","watch","newVal","fromString","val","_a","_b","_c","provide","expose"],"sources":["../../../../../../packages/components/color-picker/src/color-picker.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"popper\"\n    :visible=\"showPicker\"\n    :show-arrow=\"false\"\n    :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n    :offset=\"0\"\n    :gpu-acceleration=\"false\"\n    :popper-class=\"[ns.be('picker', 'panel'), ns.b('dropdown'), popperClass]\"\n    :stop-popper-mouse-event=\"false\"\n    effect=\"light\"\n    trigger=\"click\"\n    :transition=\"`${ns.namespace.value}-zoom-in-top`\"\n    persistent\n  >\n    <template #content>\n      <div v-click-outside=\"hide\">\n        <div :class=\"ns.be('dropdown', 'main-wrapper')\">\n          <hue-slider ref=\"hue\" class=\"hue-slider\" :color=\"color\" vertical />\n          <sv-panel ref=\"svPanel\" :color=\"color\" />\n        </div>\n        <alpha-slider v-if=\"showAlpha\" ref=\"alpha\" :color=\"color\" />\n        <predefine\n          v-if=\"predefine\"\n          ref=\"predefine\"\n          :color=\"color\"\n          :colors=\"predefine\"\n        />\n        <div :class=\"ns.be('dropdown', 'btns')\">\n          <span :class=\"ns.be('dropdown', 'value')\">\n            <el-input\n              v-model=\"customInput\"\n              :validate-event=\"false\"\n              size=\"small\"\n              @keyup.enter=\"handleConfirm\"\n              @blur=\"handleConfirm\"\n            />\n          </span>\n          <el-button\n            :class=\"ns.be('dropdown', 'link-btn')\"\n            text\n            size=\"small\"\n            @click=\"clear\"\n          >\n            {{ t('el.colorpicker.clear') }}\n          </el-button>\n          <el-button\n            plain\n            size=\"small\"\n            :class=\"ns.be('dropdown', 'btn')\"\n            @click=\"confirmValue\"\n          >\n            {{ t('el.colorpicker.confirm') }}\n          </el-button>\n        </div>\n      </div>\n    </template>\n    <template #default>\n      <div\n        :id=\"buttonId\"\n        :class=\"[\n          ns.b('picker'),\n          ns.is('disabled', colorDisabled),\n          ns.bm('picker', colorSize),\n        ]\"\n        role=\"button\"\n        :aria-label=\"buttonAriaLabel\"\n        :aria-labelledby=\"buttonAriaLabelledby\"\n        :aria-description=\"\n          t('el.colorpicker.description', { color: modelValue || '' })\n        \"\n        :tabindex=\"tabindex\"\n        @keydown.enter=\"handleTrigger\"\n      >\n        <div v-if=\"colorDisabled\" :class=\"ns.be('picker', 'mask')\" />\n        <div :class=\"ns.be('picker', 'trigger')\" @click=\"handleTrigger\">\n          <span :class=\"[ns.be('picker', 'color'), ns.is('alpha', showAlpha)]\">\n            <span\n              :class=\"ns.be('picker', 'color-inner')\"\n              :style=\"{\n                backgroundColor: displayedColor,\n              }\"\n            >\n              <el-icon\n                v-show=\"modelValue || showPanelColor\"\n                :class=\"[ns.be('picker', 'icon'), ns.is('icon-arrow-down')]\"\n              >\n                <arrow-down />\n              </el-icon>\n              <el-icon\n                v-if=\"!modelValue && !showPanelColor\"\n                :class=\"[ns.be('picker', 'empty'), ns.is('icon-close')]\"\n              >\n                <close />\n              </el-icon>\n            </span>\n          </span>\n        </div>\n      </div>\n    </template>\n  </el-tooltip>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  nextTick,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  watch,\n} from 'vue'\nimport { debounce } from 'lodash-unified'\nimport { ElButton } from '@element-plus/components/button'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { ClickOutside as vClickOutside } from '@element-plus/directives'\nimport {\n  useDisabled,\n  useFormItem,\n  useFormItemInputId,\n  useLocale,\n  useNamespace,\n  useSize,\n} from '@element-plus/hooks'\nimport { ElTooltip } from '@element-plus/components/tooltip'\nimport { ElInput } from '@element-plus/components/input'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { debugWarn } from '@element-plus/utils'\nimport { ArrowDown, Close } from '@element-plus/icons-vue'\nimport AlphaSlider from './components/alpha-slider.vue'\nimport HueSlider from './components/hue-slider.vue'\nimport Predefine from './components/predefine.vue'\nimport SvPanel from './components/sv-panel.vue'\nimport Color from './utils/color'\nimport {\n  colorPickerContextKey,\n  colorPickerEmits,\n  colorPickerProps,\n} from './color-picker'\nimport type { TooltipInstance } from '@element-plus/components/tooltip'\n\ndefineOptions({\n  name: 'ElColorPicker',\n})\nconst props = defineProps(colorPickerProps)\nconst emit = defineEmits(colorPickerEmits)\n\nconst { t } = useLocale()\nconst ns = useNamespace('color')\nconst { formItem } = useFormItem()\nconst colorSize = useSize()\nconst colorDisabled = useDisabled()\n\nconst { inputId: buttonId, isLabeledByFormItem } = useFormItemInputId(props, {\n  formItemContext: formItem,\n})\n\nconst hue = ref<InstanceType<typeof HueSlider>>()\nconst sv = ref<InstanceType<typeof SvPanel>>()\nconst alpha = ref<InstanceType<typeof AlphaSlider>>()\nconst popper = ref<TooltipInstance>()\n\n// active-change is used to prevent modelValue changes from triggering.\nlet shouldActiveChange = true\n\nconst color = reactive(\n  new Color({\n    enableAlpha: props.showAlpha,\n    format: props.colorFormat || '',\n    value: props.modelValue,\n  })\n) as Color\n\nconst showPicker = ref(false)\nconst showPanelColor = ref(false)\nconst customInput = ref('')\n\nconst displayedColor = computed(() => {\n  if (!props.modelValue && !showPanelColor.value) {\n    return 'transparent'\n  }\n  return displayedRgb(color, props.showAlpha)\n})\n\nconst currentColor = computed(() => {\n  return !props.modelValue && !showPanelColor.value ? '' : color.value\n})\n\nconst buttonAriaLabel = computed<string | undefined>(() => {\n  return !isLabeledByFormItem.value\n    ? props.label || t('el.colorpicker.defaultLabel')\n    : undefined\n})\n\nconst buttonAriaLabelledby = computed<string | undefined>(() => {\n  return isLabeledByFormItem.value ? formItem?.labelId : undefined\n})\n\nfunction displayedRgb(color: Color, showAlpha: boolean) {\n  if (!(color instanceof Color)) {\n    throw new TypeError('color should be instance of _color Class')\n  }\n\n  const { r, g, b } = color.toRgb()\n  return showAlpha\n    ? `rgba(${r}, ${g}, ${b}, ${color.get('alpha') / 100})`\n    : `rgb(${r}, ${g}, ${b})`\n}\n\nfunction setShowPicker(value: boolean) {\n  showPicker.value = value\n}\n\nconst debounceSetShowPicker = debounce(setShowPicker, 100)\n\nfunction hide() {\n  debounceSetShowPicker(false)\n  resetColor()\n}\n\nfunction resetColor() {\n  nextTick(() => {\n    if (props.modelValue) {\n      color.fromString(props.modelValue)\n    } else {\n      color.value = ''\n      nextTick(() => {\n        showPanelColor.value = false\n      })\n    }\n  })\n}\n\nfunction handleTrigger() {\n  if (colorDisabled.value) return\n  debounceSetShowPicker(!showPicker.value)\n}\n\nfunction handleConfirm() {\n  color.fromString(customInput.value)\n}\n\nfunction confirmValue() {\n  const value = color.value\n  emit(UPDATE_MODEL_EVENT, value)\n  emit('change', value)\n  if (props.validateEvent) {\n    formItem?.validate('change').catch((err) => debugWarn(err))\n  }\n  debounceSetShowPicker(false)\n  // check if modelValue change, if not change, then reset color.\n  nextTick(() => {\n    const newColor = new Color({\n      enableAlpha: props.showAlpha,\n      format: props.colorFormat || '',\n      value: props.modelValue,\n    })\n    if (!color.compare(newColor)) {\n      resetColor()\n    }\n  })\n}\n\nfunction clear() {\n  debounceSetShowPicker(false)\n  emit(UPDATE_MODEL_EVENT, null)\n  emit('change', null)\n  if (props.modelValue !== null && props.validateEvent) {\n    formItem?.validate('change').catch((err) => debugWarn(err))\n  }\n  resetColor()\n}\n\nonMounted(() => {\n  if (props.modelValue) {\n    customInput.value = currentColor.value\n  }\n})\n\nwatch(\n  () => props.modelValue,\n  (newVal) => {\n    if (!newVal) {\n      showPanelColor.value = false\n    } else if (newVal && newVal !== color.value) {\n      shouldActiveChange = false\n      color.fromString(newVal)\n    }\n  }\n)\n\nwatch(\n  () => currentColor.value,\n  (val) => {\n    customInput.value = val\n    shouldActiveChange && emit('activeChange', val)\n    shouldActiveChange = true\n  }\n)\n\nwatch(\n  () => color.value,\n  () => {\n    if (!props.modelValue && !showPanelColor.value) {\n      showPanelColor.value = true\n    }\n  }\n)\n\nwatch(\n  () => showPicker.value,\n  () => {\n    nextTick(() => {\n      hue.value?.update()\n      sv.value?.update()\n      alpha.value?.update()\n    })\n  }\n)\n\nprovide(colorPickerContextKey, {\n  currentColor,\n})\n\ndefineExpose({\n  color,\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}