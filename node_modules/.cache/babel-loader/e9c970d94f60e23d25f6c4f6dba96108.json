{"ast":null,"code":"import { defineComponent, inject, ref, computed, watch, unref, createVNode, mergeProps } from 'vue';\nimport { get } from 'lodash-unified';\nimport '../../../utils/index.mjs';\nimport '../../virtual-list/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../constants/index.mjs';\nimport GroupItem from './group-item.mjs';\nimport OptionItem from './option-item.mjs';\nimport { selectV2InjectionKey } from './token.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { isUndefined } from '../../../utils/types.mjs';\nimport { isObject } from '@vue/shared';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport FixedSizeList from '../../virtual-list/src/components/fixed-size-list.mjs';\nimport DynamicSizeList from '../../virtual-list/src/components/dynamic-size-list.mjs';\nvar ElSelectMenu = defineComponent({\n  name: \"ElSelectDropdown\",\n  props: {\n    data: {\n      type: Array,\n      required: true\n    },\n    hoveringIndex: Number,\n    width: Number\n  },\n\n  setup(props, {\n    slots,\n    expose\n  }) {\n    const select = inject(selectV2InjectionKey);\n    const ns = useNamespace(\"select\");\n    const cachedHeights = ref([]);\n    const listRef = ref();\n    const size = computed(() => props.data.length);\n    watch(() => size.value, () => {\n      var _a, _b;\n\n      (_b = (_a = select.popper.value).updatePopper) == null ? void 0 : _b.call(_a);\n    });\n    const isSized = computed(() => isUndefined(select.props.estimatedOptionHeight));\n    const listProps = computed(() => {\n      if (isSized.value) {\n        return {\n          itemSize: select.props.itemHeight\n        };\n      }\n\n      return {\n        estimatedSize: select.props.estimatedOptionHeight,\n        itemSize: idx => cachedHeights.value[idx]\n      };\n    });\n\n    const contains = (arr = [], target) => {\n      const {\n        props: {\n          valueKey\n        }\n      } = select;\n\n      if (!isObject(target)) {\n        return arr.includes(target);\n      }\n\n      return arr && arr.some(item => {\n        return get(item, valueKey) === get(target, valueKey);\n      });\n    };\n\n    const isEqual = (selected, target) => {\n      if (!isObject(target)) {\n        return selected === target;\n      } else {\n        const {\n          valueKey\n        } = select.props;\n        return get(selected, valueKey) === get(target, valueKey);\n      }\n    };\n\n    const isItemSelected = (modelValue, target) => {\n      const {\n        valueKey\n      } = select.props;\n\n      if (select.props.multiple) {\n        return contains(modelValue, get(target, valueKey));\n      }\n\n      return isEqual(modelValue, get(target, valueKey));\n    };\n\n    const isItemDisabled = (modelValue, selected) => {\n      const {\n        disabled,\n        multiple,\n        multipleLimit\n      } = select.props;\n      return disabled || !selected && (multiple ? multipleLimit > 0 && modelValue.length >= multipleLimit : false);\n    };\n\n    const isItemHovering = target => props.hoveringIndex === target;\n\n    const scrollToItem = index => {\n      const list = listRef.value;\n\n      if (list) {\n        list.scrollToItem(index);\n      }\n    };\n\n    const resetScrollTop = () => {\n      const list = listRef.value;\n\n      if (list) {\n        list.resetScrollTop();\n      }\n    };\n\n    expose({\n      listRef,\n      isSized,\n      isItemDisabled,\n      isItemHovering,\n      isItemSelected,\n      scrollToItem,\n      resetScrollTop\n    });\n\n    const Item = itemProps => {\n      const {\n        index,\n        data,\n        style\n      } = itemProps;\n      const sized = unref(isSized);\n      const {\n        itemSize,\n        estimatedSize\n      } = unref(listProps);\n      const {\n        modelValue\n      } = select.props;\n      const {\n        onSelect,\n        onHover\n      } = select;\n      const item = data[index];\n\n      if (item.type === \"Group\") {\n        return createVNode(GroupItem, {\n          \"item\": item,\n          \"style\": style,\n          \"height\": sized ? itemSize : estimatedSize\n        }, null);\n      }\n\n      const isSelected = isItemSelected(modelValue, item);\n      const isDisabled = isItemDisabled(modelValue, isSelected);\n      const isHovering = isItemHovering(index);\n      return createVNode(OptionItem, mergeProps(itemProps, {\n        \"selected\": isSelected,\n        \"disabled\": item.disabled || isDisabled,\n        \"created\": !!item.created,\n        \"hovering\": isHovering,\n        \"item\": item,\n        \"onSelect\": onSelect,\n        \"onHover\": onHover\n      }), {\n        default: props2 => {\n          var _a;\n\n          return ((_a = slots.default) == null ? void 0 : _a.call(slots, props2)) || createVNode(\"span\", null, [item.label]);\n        }\n      });\n    };\n\n    const {\n      onKeyboardNavigate,\n      onKeyboardSelect\n    } = select;\n\n    const onForward = () => {\n      onKeyboardNavigate(\"forward\");\n    };\n\n    const onBackward = () => {\n      onKeyboardNavigate(\"backward\");\n    };\n\n    const onEscOrTab = () => {\n      select.expanded = false;\n    };\n\n    const onKeydown = e => {\n      const {\n        code\n      } = e;\n      const {\n        tab,\n        esc,\n        down,\n        up,\n        enter\n      } = EVENT_CODE;\n\n      if (code !== tab) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n\n      switch (code) {\n        case tab:\n        case esc:\n          {\n            onEscOrTab();\n            break;\n          }\n\n        case down:\n          {\n            onForward();\n            break;\n          }\n\n        case up:\n          {\n            onBackward();\n            break;\n          }\n\n        case enter:\n          {\n            onKeyboardSelect();\n            break;\n          }\n      }\n    };\n\n    return () => {\n      var _a;\n\n      const {\n        data,\n        width\n      } = props;\n      const {\n        height,\n        multiple,\n        scrollbarAlwaysOn\n      } = select.props;\n\n      if (data.length === 0) {\n        return createVNode(\"div\", {\n          \"class\": ns.b(\"dropdown\"),\n          \"style\": {\n            width: `${width}px`\n          }\n        }, [(_a = slots.empty) == null ? void 0 : _a.call(slots)]);\n      }\n\n      const List = unref(isSized) ? FixedSizeList : DynamicSizeList;\n      return createVNode(\"div\", {\n        \"class\": [ns.b(\"dropdown\"), ns.is(\"multiple\", multiple)]\n      }, [createVNode(List, mergeProps({\n        \"ref\": listRef\n      }, unref(listProps), {\n        \"className\": ns.be(\"dropdown\", \"list\"),\n        \"scrollbarAlwaysOn\": scrollbarAlwaysOn,\n        \"data\": data,\n        \"height\": height,\n        \"width\": width,\n        \"total\": data.length,\n        \"onKeydown\": onKeydown\n      }), {\n        default: props2 => createVNode(Item, props2, null)\n      })]);\n    };\n  }\n\n});\nexport { ElSelectMenu as default };","map":{"version":3,"mappings":"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","names":["defineComponent","name","props","data","type","Array","required","hoveringIndex","Number","width","slots","expose","select","ns","cachedHeights","listRef","computed","watch","size","_a","popper","value","updatePopper","isSized","isUndefined","estimatedOptionHeight","listProps","itemSize","itemHeight","estimatedSize","idx","contains","valueKey","arr","isObject","target","item","includes","get","isEqual","selected","disabled","multiple","multipleLimit","modelValue","isItemDisabled","index","list","isItemHovering","scrollToItem","isItemSelected","resetScrollTop","style","sized","Item","itemProps","unref","isDisabled","onSelect","onHover","isHovering","default","onKeyboardNavigate","onKeyboardSelect","tab","onForward","EVENT_CODE","onBackward","onEscOrTab","onKeydown","code","up","enter","e","scrollbarAlwaysOn"],"sources":["../../../../../../packages/components/select-v2/src/select-dropdown.tsx"],"sourcesContent":["import { computed, defineComponent, inject, ref, unref, watch } from 'vue'\nimport { get } from 'lodash-unified'\nimport { isObject, isUndefined } from '@element-plus/utils'\nimport {\n  DynamicSizeList,\n  FixedSizeList,\n} from '@element-plus/components/virtual-list'\nimport { useNamespace } from '@element-plus/hooks'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport GroupItem from './group-item.vue'\nimport OptionItem from './option-item.vue'\n\nimport { selectV2InjectionKey } from './token'\n\nimport type { ItemProps } from '@element-plus/components/virtual-list'\nimport type { Option, OptionItemProps } from './select.types'\n\nexport default defineComponent({\n  name: 'ElSelectDropdown',\n\n  props: {\n    data: {\n      type: Array,\n      required: true,\n    },\n    hoveringIndex: Number,\n    width: Number,\n  },\n  setup(props, { slots, expose }) {\n    const select = inject(selectV2InjectionKey)!\n    const ns = useNamespace('select')\n    const cachedHeights = ref<Array<number>>([])\n\n    const listRef = ref()\n\n    const size = computed(() => props.data.length)\n    watch(\n      () => size.value,\n      () => {\n        select.popper.value.updatePopper?.()\n      }\n    )\n\n    const isSized = computed(() =>\n      isUndefined(select.props.estimatedOptionHeight)\n    )\n    const listProps = computed(() => {\n      if (isSized.value) {\n        return {\n          itemSize: select.props.itemHeight,\n        }\n      }\n\n      return {\n        estimatedSize: select.props.estimatedOptionHeight,\n        itemSize: (idx: number) => cachedHeights.value[idx],\n      }\n    })\n\n    const contains = (arr: Array<any> = [], target: any) => {\n      const {\n        props: { valueKey },\n      } = select\n\n      if (!isObject(target)) {\n        return arr.includes(target)\n      }\n\n      return (\n        arr &&\n        arr.some((item) => {\n          return get(item, valueKey) === get(target, valueKey)\n        })\n      )\n    }\n    const isEqual = (selected: unknown, target: unknown) => {\n      if (!isObject(target)) {\n        return selected === target\n      } else {\n        const { valueKey } = select.props\n        return get(selected, valueKey) === get(target, valueKey)\n      }\n    }\n\n    const isItemSelected = (modelValue: any[] | any, target: Option) => {\n      const { valueKey } = select.props\n      if (select.props.multiple) {\n        return contains(modelValue, get(target, valueKey))\n      }\n      return isEqual(modelValue, get(target, valueKey))\n    }\n\n    const isItemDisabled = (modelValue: any[] | any, selected: boolean) => {\n      const { disabled, multiple, multipleLimit } = select.props\n      return (\n        disabled ||\n        (!selected &&\n          (multiple\n            ? multipleLimit > 0 && modelValue.length >= multipleLimit\n            : false))\n      )\n    }\n\n    const isItemHovering = (target: number) => props.hoveringIndex === target\n\n    const scrollToItem = (index: number) => {\n      const list = listRef.value as any\n      if (list) {\n        list.scrollToItem(index)\n      }\n    }\n\n    const resetScrollTop = () => {\n      const list = listRef.value as any\n      if (list) {\n        list.resetScrollTop()\n      }\n    }\n\n    expose({\n      listRef,\n      isSized,\n\n      isItemDisabled,\n      isItemHovering,\n      isItemSelected,\n      scrollToItem,\n      resetScrollTop,\n    })\n\n    const Item = (itemProps: ItemProps<any>) => {\n      const { index, data, style } = itemProps\n      const sized = unref(isSized)\n      const { itemSize, estimatedSize } = unref(listProps)\n      const { modelValue } = select.props\n      const { onSelect, onHover } = select\n      const item = data[index]\n      if (item.type === 'Group') {\n        return (\n          <GroupItem\n            item={item}\n            style={style}\n            height={(sized ? itemSize : estimatedSize) as number}\n          />\n        )\n      }\n\n      const isSelected = isItemSelected(modelValue, item)\n      const isDisabled = isItemDisabled(modelValue, isSelected)\n      const isHovering = isItemHovering(index)\n      return (\n        <OptionItem\n          {...itemProps}\n          selected={isSelected}\n          disabled={item.disabled || isDisabled}\n          created={!!item.created}\n          hovering={isHovering}\n          item={item}\n          onSelect={onSelect}\n          onHover={onHover}\n        >\n          {{\n            default: (props: OptionItemProps) =>\n              slots.default?.(props) || <span>{item.label}</span>,\n          }}\n        </OptionItem>\n      )\n    }\n\n    // computed\n    const { onKeyboardNavigate, onKeyboardSelect } = select\n\n    const onForward = () => {\n      onKeyboardNavigate('forward')\n    }\n\n    const onBackward = () => {\n      onKeyboardNavigate('backward')\n    }\n\n    const onEscOrTab = () => {\n      select.expanded = false\n    }\n\n    const onKeydown = (e: KeyboardEvent) => {\n      const { code } = e\n      const { tab, esc, down, up, enter } = EVENT_CODE\n      if (code !== tab) {\n        e.preventDefault()\n        e.stopPropagation()\n      }\n\n      switch (code) {\n        case tab:\n        case esc: {\n          onEscOrTab()\n          break\n        }\n        case down: {\n          onForward()\n          break\n        }\n        case up: {\n          onBackward()\n          break\n        }\n        case enter: {\n          onKeyboardSelect()\n          break\n        }\n      }\n    }\n\n    return () => {\n      const { data, width } = props\n      const { height, multiple, scrollbarAlwaysOn } = select.props\n\n      if (data.length === 0) {\n        return (\n          <div\n            class={ns.b('dropdown')}\n            style={{\n              width: `${width}px`,\n            }}\n          >\n            {slots.empty?.()}\n          </div>\n        )\n      }\n\n      const List = unref(isSized) ? FixedSizeList : DynamicSizeList\n\n      return (\n        <div class={[ns.b('dropdown'), ns.is('multiple', multiple)]}>\n          <List\n            ref={listRef}\n            {...unref(listProps)}\n            className={ns.be('dropdown', 'list')}\n            scrollbarAlwaysOn={scrollbarAlwaysOn}\n            data={data}\n            height={height}\n            width={width}\n            total={data.length}\n            // @ts-ignore - dts problem\n            onKeydown={onKeydown}\n          >\n            {{\n              default: (props: ItemProps<any>) => <Item {...props} />,\n            }}\n          </List>\n        </div>\n      )\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module"}