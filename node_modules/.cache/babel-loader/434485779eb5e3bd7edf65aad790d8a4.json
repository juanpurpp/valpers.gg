{"ast":null,"code":"import { defineComponent, useAttrs, ref, computed, nextTick, watch, onMounted, openBlock, createElementBlock, normalizeClass, unref, normalizeStyle, mergeProps, createCommentVNode, renderSlot, createElementVNode, toDisplayString, Fragment, createBlock, withCtx } from 'vue';\nimport { isClient, useThrottleFn, useEventListener } from '@vueuse/core';\nimport '../../../hooks/index.mjs';\nimport { ElImageViewer } from '../../image-viewer/index.mjs';\nimport '../../../utils/index.mjs';\nimport { imageProps, imageEmits } from './image.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useAttrs as useAttrs$1 } from '../../../hooks/use-attrs/index.mjs';\nimport { isInContainer } from '../../../utils/dom/position.mjs';\nimport { isElement } from '../../../utils/types.mjs';\nimport { isString } from '@vue/shared';\nimport { getScrollContainer } from '../../../utils/dom/scroll.mjs';\nconst _hoisted_1 = [\"src\", \"loading\"];\nconst _hoisted_2 = {\n  key: 0\n};\n\nconst __default__ = defineComponent({\n  name: \"ElImage\",\n  inheritAttrs: false\n});\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: imageProps,\n  emits: imageEmits,\n\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    let prevOverflow = \"\";\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"image\");\n    const rawAttrs = useAttrs();\n    const attrs = useAttrs$1();\n    const imageSrc = ref();\n    const hasLoadError = ref(false);\n    const isLoading = ref(true);\n    const showViewer = ref(false);\n    const container = ref();\n\n    const _scrollContainer = ref();\n\n    const supportLoading = isClient && \"loading\" in HTMLImageElement.prototype;\n    let stopScrollListener;\n    let stopWheelListener;\n    const containerStyle = computed(() => rawAttrs.style);\n    const imageStyle = computed(() => {\n      const {\n        fit\n      } = props;\n\n      if (isClient && fit) {\n        return {\n          objectFit: fit\n        };\n      }\n\n      return {};\n    });\n    const preview = computed(() => {\n      const {\n        previewSrcList\n      } = props;\n      return Array.isArray(previewSrcList) && previewSrcList.length > 0;\n    });\n    const imageIndex = computed(() => {\n      const {\n        previewSrcList,\n        initialIndex\n      } = props;\n      let previewIndex = initialIndex;\n\n      if (initialIndex > previewSrcList.length - 1) {\n        previewIndex = 0;\n      }\n\n      return previewIndex;\n    });\n    const isManual = computed(() => {\n      if (props.loading === \"eager\") return false;\n      return !supportLoading && props.loading === \"lazy\" || props.lazy;\n    });\n\n    const loadImage = () => {\n      if (!isClient) return;\n      isLoading.value = true;\n      hasLoadError.value = false;\n      imageSrc.value = props.src;\n    };\n\n    function handleLoad(event) {\n      isLoading.value = false;\n      hasLoadError.value = false;\n      emit(\"load\", event);\n    }\n\n    function handleError(event) {\n      isLoading.value = false;\n      hasLoadError.value = true;\n      emit(\"error\", event);\n    }\n\n    function handleLazyLoad() {\n      if (isInContainer(container.value, _scrollContainer.value)) {\n        loadImage();\n        removeLazyLoadListener();\n      }\n    }\n\n    const lazyLoadHandler = useThrottleFn(handleLazyLoad, 200);\n\n    async function addLazyLoadListener() {\n      var _a;\n\n      if (!isClient) return;\n      await nextTick();\n      const {\n        scrollContainer\n      } = props;\n\n      if (isElement(scrollContainer)) {\n        _scrollContainer.value = scrollContainer;\n      } else if (isString(scrollContainer) && scrollContainer !== \"\") {\n        _scrollContainer.value = (_a = document.querySelector(scrollContainer)) != null ? _a : void 0;\n      } else if (container.value) {\n        _scrollContainer.value = getScrollContainer(container.value);\n      }\n\n      if (_scrollContainer.value) {\n        stopScrollListener = useEventListener(_scrollContainer, \"scroll\", lazyLoadHandler);\n        setTimeout(() => handleLazyLoad(), 100);\n      }\n    }\n\n    function removeLazyLoadListener() {\n      if (!isClient || !_scrollContainer.value || !lazyLoadHandler) return;\n      stopScrollListener == null ? void 0 : stopScrollListener();\n      _scrollContainer.value = void 0;\n    }\n\n    function wheelHandler(e) {\n      if (!e.ctrlKey) return;\n\n      if (e.deltaY < 0) {\n        e.preventDefault();\n        return false;\n      } else if (e.deltaY > 0) {\n        e.preventDefault();\n        return false;\n      }\n    }\n\n    function clickHandler() {\n      if (!preview.value) return;\n      stopWheelListener = useEventListener(\"wheel\", wheelHandler, {\n        passive: false\n      });\n      prevOverflow = document.body.style.overflow;\n      document.body.style.overflow = \"hidden\";\n      showViewer.value = true;\n      emit(\"show\");\n    }\n\n    function closeViewer() {\n      stopWheelListener == null ? void 0 : stopWheelListener();\n      document.body.style.overflow = prevOverflow;\n      showViewer.value = false;\n      emit(\"close\");\n    }\n\n    function switchViewer(val) {\n      emit(\"switch\", val);\n    }\n\n    watch(() => props.src, () => {\n      if (isManual.value) {\n        isLoading.value = true;\n        hasLoadError.value = false;\n        removeLazyLoadListener();\n        addLazyLoadListener();\n      } else {\n        loadImage();\n      }\n    });\n    onMounted(() => {\n      if (isManual.value) {\n        addLazyLoadListener();\n      } else {\n        loadImage();\n      }\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        ref_key: \"container\",\n        ref: container,\n        class: normalizeClass([unref(ns).b(), _ctx.$attrs.class]),\n        style: normalizeStyle(unref(containerStyle))\n      }, [imageSrc.value !== void 0 && !hasLoadError.value ? (openBlock(), createElementBlock(\"img\", mergeProps({\n        key: 0\n      }, unref(attrs), {\n        src: imageSrc.value,\n        loading: _ctx.loading,\n        style: unref(imageStyle),\n        class: [unref(ns).e(\"inner\"), unref(preview) && unref(ns).e(\"preview\"), isLoading.value && unref(ns).is(\"loading\")],\n        onClick: clickHandler,\n        onLoad: handleLoad,\n        onError: handleError\n      }), null, 16, _hoisted_1)) : createCommentVNode(\"v-if\", true), isLoading.value || hasLoadError.value ? (openBlock(), createElementBlock(\"div\", {\n        key: 1,\n        class: normalizeClass(unref(ns).e(\"wrapper\"))\n      }, [isLoading.value ? renderSlot(_ctx.$slots, \"placeholder\", {\n        key: 0\n      }, () => [createElementVNode(\"div\", {\n        class: normalizeClass(unref(ns).e(\"placeholder\"))\n      }, null, 2)]) : hasLoadError.value ? renderSlot(_ctx.$slots, \"error\", {\n        key: 1\n      }, () => [createElementVNode(\"div\", {\n        class: normalizeClass(unref(ns).e(\"error\"))\n      }, toDisplayString(unref(t)(\"el.image.error\")), 3)]) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true), unref(preview) ? (openBlock(), createElementBlock(Fragment, {\n        key: 2\n      }, [showViewer.value ? (openBlock(), createBlock(unref(ElImageViewer), {\n        key: 0,\n        \"z-index\": _ctx.zIndex,\n        \"initial-index\": unref(imageIndex),\n        infinite: _ctx.infinite,\n        \"url-list\": _ctx.previewSrcList,\n        \"hide-on-click-modal\": _ctx.hideOnClickModal,\n        teleported: _ctx.previewTeleported,\n        \"close-on-press-escape\": _ctx.closeOnPressEscape,\n        onClose: closeViewer,\n        onSwitch: switchViewer\n      }, {\n        default: withCtx(() => [_ctx.$slots.viewer ? (openBlock(), createElementBlock(\"div\", _hoisted_2, [renderSlot(_ctx.$slots, \"viewer\")])) : createCommentVNode(\"v-if\", true)]),\n        _: 3\n      }, 8, [\"z-index\", \"initial-index\", \"infinite\", \"url-list\", \"hide-on-click-modal\", \"teleported\", \"close-on-press-escape\"])) : createCommentVNode(\"v-if\", true)], 64)) : createCommentVNode(\"v-if\", true)], 6);\n    };\n  }\n\n});\n\nvar Image = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/image/src/image.vue\"]]);\n\nexport { Image as default };","map":{"version":3,"mappings":"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","names":["name","inheritAttrs","prevOverflow","t","useLocale","useNamespace","rawAttrs","useRawAttrs","attrs","useAttrs","imageSrc","ref","container","_scrollContainer","isClient","HTMLImageElement","containerStyle","style","computed","fit","props","objectFit","previewSrcList","Array","length","initialIndex","previewIndex","loading","supportLoading","loadImage","isLoading","value","hasLoadError","event","emit","isInContainer","removeLazyLoadListener","useThrottleFn","_a","nextTick","scrollContainer","stopScrollListener","setTimeout","wheelHandler","e","clickHandler","stopWheelListener","passive","overflow","document","showViewer","val","watch","addLazyLoadListener","onMounted"],"sources":["../../../../../../packages/components/image/src/image.vue"],"sourcesContent":["<template>\n  <div ref=\"container\" :class=\"[ns.b(), $attrs.class]\" :style=\"containerStyle\">\n    <img\n      v-if=\"imageSrc !== undefined && !hasLoadError\"\n      v-bind=\"attrs\"\n      :src=\"imageSrc\"\n      :loading=\"loading\"\n      :style=\"imageStyle\"\n      :class=\"[\n        ns.e('inner'),\n        preview && ns.e('preview'),\n        isLoading && ns.is('loading'),\n      ]\"\n      @click=\"clickHandler\"\n      @load=\"handleLoad\"\n      @error=\"handleError\"\n    />\n    <div v-if=\"isLoading || hasLoadError\" :class=\"ns.e('wrapper')\">\n      <slot v-if=\"isLoading\" name=\"placeholder\">\n        <div :class=\"ns.e('placeholder')\" />\n      </slot>\n      <slot v-else-if=\"hasLoadError\" name=\"error\">\n        <div :class=\"ns.e('error')\">{{ t('el.image.error') }}</div>\n      </slot>\n    </div>\n    <template v-if=\"preview\">\n      <image-viewer\n        v-if=\"showViewer\"\n        :z-index=\"zIndex\"\n        :initial-index=\"imageIndex\"\n        :infinite=\"infinite\"\n        :url-list=\"previewSrcList\"\n        :hide-on-click-modal=\"hideOnClickModal\"\n        :teleported=\"previewTeleported\"\n        :close-on-press-escape=\"closeOnPressEscape\"\n        @close=\"closeViewer\"\n        @switch=\"switchViewer\"\n      >\n        <div v-if=\"$slots.viewer\">\n          <slot name=\"viewer\" />\n        </div>\n      </image-viewer>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  nextTick,\n  onMounted,\n  ref,\n  useAttrs as useRawAttrs,\n  watch,\n} from 'vue'\nimport { isClient, useEventListener, useThrottleFn } from '@vueuse/core'\nimport { useAttrs, useLocale, useNamespace } from '@element-plus/hooks'\nimport ImageViewer from '@element-plus/components/image-viewer'\nimport {\n  getScrollContainer,\n  isElement,\n  isInContainer,\n  isString,\n} from '@element-plus/utils'\nimport { imageEmits, imageProps } from './image'\n\nimport type { CSSProperties, StyleValue } from 'vue'\n\ndefineOptions({\n  name: 'ElImage',\n  inheritAttrs: false,\n})\n\nconst props = defineProps(imageProps)\nconst emit = defineEmits(imageEmits)\n\nlet prevOverflow = ''\n\nconst { t } = useLocale()\nconst ns = useNamespace('image')\nconst rawAttrs = useRawAttrs()\nconst attrs = useAttrs()\n\nconst imageSrc = ref<string | undefined>()\nconst hasLoadError = ref(false)\nconst isLoading = ref(true)\nconst showViewer = ref(false)\nconst container = ref<HTMLElement>()\nconst _scrollContainer = ref<HTMLElement | Window>()\n\nconst supportLoading = isClient && 'loading' in HTMLImageElement.prototype\nlet stopScrollListener: (() => void) | undefined\nlet stopWheelListener: (() => void) | undefined\n\nconst containerStyle = computed(() => rawAttrs.style as StyleValue)\n\nconst imageStyle = computed<CSSProperties>(() => {\n  const { fit } = props\n  if (isClient && fit) {\n    return { objectFit: fit }\n  }\n  return {}\n})\n\nconst preview = computed(() => {\n  const { previewSrcList } = props\n  return Array.isArray(previewSrcList) && previewSrcList.length > 0\n})\n\nconst imageIndex = computed(() => {\n  const { previewSrcList, initialIndex } = props\n  let previewIndex = initialIndex\n  if (initialIndex > previewSrcList.length - 1) {\n    previewIndex = 0\n  }\n  return previewIndex\n})\n\nconst isManual = computed(() => {\n  if (props.loading === 'eager') return false\n  return (!supportLoading && props.loading === 'lazy') || props.lazy\n})\n\nconst loadImage = () => {\n  if (!isClient) return\n\n  // reset status\n  isLoading.value = true\n  hasLoadError.value = false\n  imageSrc.value = props.src\n}\n\nfunction handleLoad(event: Event) {\n  isLoading.value = false\n  hasLoadError.value = false\n  emit('load', event)\n}\n\nfunction handleError(event: Event) {\n  isLoading.value = false\n  hasLoadError.value = true\n  emit('error', event)\n}\n\nfunction handleLazyLoad() {\n  if (isInContainer(container.value, _scrollContainer.value)) {\n    loadImage()\n    removeLazyLoadListener()\n  }\n}\n\nconst lazyLoadHandler = useThrottleFn(handleLazyLoad, 200)\n\nasync function addLazyLoadListener() {\n  if (!isClient) return\n\n  await nextTick()\n\n  const { scrollContainer } = props\n  if (isElement(scrollContainer)) {\n    _scrollContainer.value = scrollContainer\n  } else if (isString(scrollContainer) && scrollContainer !== '') {\n    _scrollContainer.value =\n      document.querySelector<HTMLElement>(scrollContainer) ?? undefined\n  } else if (container.value) {\n    _scrollContainer.value = getScrollContainer(container.value)\n  }\n\n  if (_scrollContainer.value) {\n    stopScrollListener = useEventListener(\n      _scrollContainer,\n      'scroll',\n      lazyLoadHandler\n    )\n    setTimeout(() => handleLazyLoad(), 100)\n  }\n}\n\nfunction removeLazyLoadListener() {\n  if (!isClient || !_scrollContainer.value || !lazyLoadHandler) return\n\n  stopScrollListener?.()\n  _scrollContainer.value = undefined\n}\n\nfunction wheelHandler(e: WheelEvent) {\n  if (!e.ctrlKey) return\n\n  if (e.deltaY < 0) {\n    e.preventDefault()\n    return false\n  } else if (e.deltaY > 0) {\n    e.preventDefault()\n    return false\n  }\n}\n\nfunction clickHandler() {\n  // don't show viewer when preview is false\n  if (!preview.value) return\n\n  stopWheelListener = useEventListener('wheel', wheelHandler, {\n    passive: false,\n  })\n\n  // prevent body scroll\n  prevOverflow = document.body.style.overflow\n  document.body.style.overflow = 'hidden'\n  showViewer.value = true\n  emit('show')\n}\n\nfunction closeViewer() {\n  stopWheelListener?.()\n  document.body.style.overflow = prevOverflow\n  showViewer.value = false\n  emit('close')\n}\n\nfunction switchViewer(val: number) {\n  emit('switch', val)\n}\n\nwatch(\n  () => props.src,\n  () => {\n    if (isManual.value) {\n      // reset status\n      isLoading.value = true\n      hasLoadError.value = false\n      removeLazyLoadListener()\n      addLazyLoadListener()\n    } else {\n      loadImage()\n    }\n  }\n)\n\nonMounted(() => {\n  if (isManual.value) {\n    addLazyLoadListener()\n  } else {\n    loadImage()\n  }\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}