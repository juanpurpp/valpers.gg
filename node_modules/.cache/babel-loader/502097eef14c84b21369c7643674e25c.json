{"ast":null,"code":"import { defineComponent, inject, ref, watch, watchEffect, openBlock, createElementBlock, normalizeClass, createElementVNode, Fragment, renderList, normalizeStyle } from 'vue';\nimport '../../../../hooks/index.mjs';\nimport { colorPickerContextKey } from '../color-picker2.mjs';\nimport Color from '../utils/color.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\n\nconst _sfc_main = defineComponent({\n  props: {\n    colors: {\n      type: Array,\n      required: true\n    },\n    color: {\n      type: Object,\n      required: true\n    }\n  },\n\n  setup(props) {\n    const ns = useNamespace(\"color-predefine\");\n    const {\n      currentColor\n    } = inject(colorPickerContextKey);\n    const rgbaColors = ref(parseColors(props.colors, props.color));\n    watch(() => currentColor.value, val => {\n      const color = new Color();\n      color.fromString(val);\n      rgbaColors.value.forEach(item => {\n        item.selected = color.compare(item);\n      });\n    });\n    watchEffect(() => {\n      rgbaColors.value = parseColors(props.colors, props.color);\n    });\n\n    function handleSelect(index) {\n      props.color.fromString(props.colors[index]);\n    }\n\n    function parseColors(colors, color) {\n      return colors.map(value => {\n        const c = new Color();\n        c.enableAlpha = true;\n        c.format = \"rgba\";\n        c.fromString(value);\n        c.selected = c.value === color.value;\n        return c;\n      });\n    }\n\n    return {\n      rgbaColors,\n      handleSelect,\n      ns\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"onClick\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.ns.b())\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"colors\"))\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.rgbaColors, (item, index) => {\n    return openBlock(), createElementBlock(\"div\", {\n      key: _ctx.colors[index],\n      class: normalizeClass([_ctx.ns.e(\"color-selector\"), _ctx.ns.is(\"alpha\", item._alpha < 100), {\n        selected: item.selected\n      }]),\n      onClick: $event => _ctx.handleSelect(index)\n    }, [createElementVNode(\"div\", {\n      style: normalizeStyle({\n        backgroundColor: item.value\n      })\n    }, null, 4)], 10, _hoisted_1);\n  }), 128))], 2)], 2);\n}\n\nvar Predefine = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/components/predefine.vue\"]]);\n\nexport { Predefine as default };","map":{"version":3,"mappings":";;;;;;;AA2BA,MAAKA,YAAaC,eAAa;EAC7BC,KAAO;IACLC,MAAQ;MACNC,IAAM,OADA;MAENC,QAAU;IAFJ,CADH;IAKLC,KAAO;MACLF,IAAM,QADD;MAELC,QAAU;IAFL;EALF,CADsB;;EAW7BE,MAAML,KAAN,EAAa;IACL,WAAKM,aAAa,iBAAb,CAAL;IACA;MAAEC;IAAF,IAAmBC,OAAOC,qBAAP,CAAnB;IAEN,MAAMC,aAAaC,GAAI,aAAYX,MAAMC,MAAlB,EAA0BD,MAAMI,KAAhC,EAAvB;IAIAQ,MACE,MAAML,aAAaM,KADrB,EAEGC,GAAD,IAAS;MACD,cAAQ,IAAIC,KAAJ,EAAR;MACNX,MAAMY,UAAN,CAAiBF,GAAjB;MAEWJ,iBAAMO,OAAN,CAAeC,IAAD,IAAU;QAC5BA,gBAAWd,KAAM,QAAN,CAAcc,IAAd,CAAX;MACN,CAFU;IAIf,CAVA;IAYAC,YAAY,MAAM;MAChBT,WAAWG,KAAX,GAAmBO,YAAYpB,KAAM,OAAlB,EAA0BA,MAAMI,KAAhC,CAAnB;IACD,CAFD;;IAIA,sBAAsBiB,KAAtB,EAAqC;MACnCrB,MAAMI,KAAN,CAAYY,UAAZ,CAAuBhB,KAAM,OAAN,CAAaqB,KAAb,CAAvB;IACF;;IAEA,qBAAqBpB,MAArB,EAAuCG,KAAvC,EAAqD;MAC5C,cAAOkB,GAAP,CAAYT,KAAD,IAAW;QACrB,UAAI,IAAIE,KAAJ,EAAJ;QACNQ,EAAEC,WAAF,GAAgB,IAAhB;QACAD,EAAEE,MAAF,GAAW,MAAX;QACAF,EAAEP,UAAF,CAAaH,KAAb;QACEU,aAAWA,CAAE,MAAF,KAAYnB,KAAM,MAA7B;QACK;MACR,CAPM;IAQT;;IACO;MACLM,UADK;MAELgB,YAFK;MAGLC;IAHK;EAKT;;AAtD6B,EAA/B;;;;;sBA1BEC,kBAeM;IAfAC,OAAKC,cAAE,SAAGC,CAAH;EAeP,GAfW,CACfC,kBAaM;IAbAH,OAAKC,cAAE,SAAGG,CAAH,CAAI,QAAJ;EAaP,GAbW,EACfC,oCAWMC,QAXN,EAC0B,IAD1B,EAC0BC,4BAAU,CAA1BlB,IAA0B,EAApBG,KAAoB,KAAf;wBADrBO,kBAWM;MATHS,KAAKC,IAAO,OAAP,CAAOjB,KAAP,CASF;MARHQ,KAAK,kBAAcS,QAAGL,CAAH,CAAI,gBAAJ,CAAd,EAAgDK,IAAG,GAAH,CAAGC,EAAH,CAAK,OAAL,EAAerB,KAAKsB,MAAL,GAAW,GAA1B,CAAhD,EAA0E;QAAAC,UAA+BvB,KAAKuB;MAApC,CAA1E,EAQF;MAHHC,OAAK,YAAEJ,kBAAajB,KAAb;IAGJ,GAHsB,CAE1BW,kBAAgD;MAA1CW,OAAKC,cAAqB;QAAAC,sBAAKhC;MAAL;IAAgB,GAAN,IAAM,EAAN,CAAM,CAFtB,CAGtB;GAVoB,CAD1B,MADe,EAaX,IAdS,CAeX","names":["_sfc_main","defineComponent","props","colors","type","required","color","setup","useNamespace","currentColor","inject","colorPickerContextKey","rgbaColors","ref","watch","value","val","Color","fromString","forEach","item","watchEffect","parseColors","index","map","c","enableAlpha","format","handleSelect","ns","_createElementBlock","class","_normalizeClass","b","_createElementVNode","e","_openBlock","_Fragment","_renderList","key","_ctx","is","_alpha","selected","onClick","style","_normalizeStyle","backgroundColor"],"sources":["../../../../../../../packages/components/color-picker/src/components/predefine.vue"],"sourcesContent":["<template>\n  <div :class=\"ns.b()\">\n    <div :class=\"ns.e('colors')\">\n      <div\n        v-for=\"(item, index) in rgbaColors\"\n        :key=\"colors[index]\"\n        :class=\"[\n          ns.e('color-selector'),\n          ns.is('alpha', item._alpha < 100),\n          { selected: item.selected },\n        ]\"\n        @click=\"handleSelect(index)\"\n      >\n        <div :style=\"{ backgroundColor: item.value }\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, inject, ref, watch, watchEffect } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { colorPickerContextKey } from '../color-picker'\nimport Color from '../utils/color'\n\nimport type { PropType, Ref } from 'vue'\n\nexport default defineComponent({\n  props: {\n    colors: {\n      type: Array as PropType<string[]>,\n      required: true,\n    },\n    color: {\n      type: Object as PropType<Color>,\n      required: true,\n    },\n  },\n  setup(props) {\n    const ns = useNamespace('color-predefine')\n    const { currentColor } = inject(colorPickerContextKey)!\n\n    const rgbaColors = ref(parseColors(props.colors, props.color)) as Ref<\n      Color[]\n    >\n\n    watch(\n      () => currentColor.value,\n      (val) => {\n        const color = new Color()\n        color.fromString(val)\n\n        rgbaColors.value.forEach((item) => {\n          item.selected = color.compare(item)\n        })\n      }\n    )\n\n    watchEffect(() => {\n      rgbaColors.value = parseColors(props.colors, props.color)\n    })\n\n    function handleSelect(index: number) {\n      props.color.fromString(props.colors[index])\n    }\n\n    function parseColors(colors: string[], color: Color) {\n      return colors.map((value) => {\n        const c = new Color()\n        c.enableAlpha = true\n        c.format = 'rgba'\n        c.fromString(value)\n        c.selected = c.value === color.value\n        return c\n      })\n    }\n    return {\n      rgbaColors,\n      handleSelect,\n      ns,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}