{"ast":null,"code":"import { defineComponent, useSlots, ref, computed, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, renderSlot, toDisplayString, createVNode, withCtx, createTextVNode, createCommentVNode, createSlots, normalizeProps, mergeProps, Fragment, renderList, createBlock } from 'vue';\nimport dayjs from 'dayjs';\nimport { ElButtonGroup, ElButton } from '../../button/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport DateTable from './date-table2.mjs';\nimport { calendarProps, calendarEmits } from './calendar.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { INPUT_EVENT, UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { useDeprecated } from '../../../hooks/use-deprecated/index.mjs';\nconst COMPONENT_NAME = \"ElCalendar\";\n\nconst __default__ = defineComponent({\n  name: COMPONENT_NAME\n});\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: calendarProps,\n  emits: calendarEmits,\n\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const solts = useSlots();\n    const ns = useNamespace(\"calendar\");\n    const {\n      t,\n      lang\n    } = useLocale();\n    const selectedDay = ref();\n    const now = dayjs().locale(lang.value);\n    const realSelectedDay = computed({\n      get() {\n        if (!props.modelValue) return selectedDay.value;\n        return date.value;\n      },\n\n      set(val) {\n        if (!val) return;\n        selectedDay.value = val;\n        const result = val.toDate();\n        emit(INPUT_EVENT, result);\n        emit(UPDATE_MODEL_EVENT, result);\n      }\n\n    });\n    const validatedRange = computed(() => {\n      if (!props.range) return [];\n      const rangeArrDayjs = props.range.map(_ => dayjs(_).locale(lang.value));\n      const [startDayjs, endDayjs] = rangeArrDayjs;\n\n      if (startDayjs.isAfter(endDayjs)) {\n        debugWarn(COMPONENT_NAME, \"end time should be greater than start time\");\n        return [];\n      }\n\n      if (startDayjs.isSame(endDayjs, \"month\")) {\n        return calculateValidatedDateRange(startDayjs, endDayjs);\n      } else {\n        if (startDayjs.add(1, \"month\").month() !== endDayjs.month()) {\n          debugWarn(COMPONENT_NAME, \"start time and end time interval must not exceed two months\");\n          return [];\n        }\n\n        return calculateValidatedDateRange(startDayjs, endDayjs);\n      }\n    });\n    const date = computed(() => {\n      if (!props.modelValue) {\n        if (realSelectedDay.value) {\n          return realSelectedDay.value;\n        } else if (validatedRange.value.length) {\n          return validatedRange.value[0][0];\n        }\n\n        return now;\n      } else {\n        return dayjs(props.modelValue).locale(lang.value);\n      }\n    });\n    const prevMonthDayjs = computed(() => date.value.subtract(1, \"month\").date(1));\n    const nextMonthDayjs = computed(() => date.value.add(1, \"month\").date(1));\n    const prevYearDayjs = computed(() => date.value.subtract(1, \"year\").date(1));\n    const nextYearDayjs = computed(() => date.value.add(1, \"year\").date(1));\n    const i18nDate = computed(() => {\n      const pickedMonth = `el.datepicker.month${date.value.format(\"M\")}`;\n      return `${date.value.year()} ${t(\"el.datepicker.year\")} ${t(pickedMonth)}`;\n    });\n\n    const calculateValidatedDateRange = (startDayjs, endDayjs) => {\n      const firstDay = startDayjs.startOf(\"week\");\n      const lastDay = endDayjs.endOf(\"week\");\n      const firstMonth = firstDay.get(\"month\");\n      const lastMonth = lastDay.get(\"month\");\n\n      if (firstMonth === lastMonth) {\n        return [[firstDay, lastDay]];\n      } else if (firstMonth + 1 === lastMonth) {\n        const firstMonthLastDay = firstDay.endOf(\"month\");\n        const lastMonthFirstDay = lastDay.startOf(\"month\");\n        const isSameWeek = firstMonthLastDay.isSame(lastMonthFirstDay, \"week\");\n        const lastMonthStartDay = isSameWeek ? lastMonthFirstDay.add(1, \"week\") : lastMonthFirstDay;\n        return [[firstDay, firstMonthLastDay], [lastMonthStartDay.startOf(\"week\"), lastDay]];\n      } else if (firstMonth + 2 === lastMonth || (firstMonth + 1) % 11 === lastMonth) {\n        const firstMonthLastDay = firstDay.endOf(\"month\");\n        const secondMonthFirstDay = firstDay.add(1, \"month\").startOf(\"month\");\n        const secondMonthStartDay = firstMonthLastDay.isSame(secondMonthFirstDay, \"week\") ? secondMonthFirstDay.add(1, \"week\") : secondMonthFirstDay;\n        const secondMonthLastDay = secondMonthStartDay.endOf(\"month\");\n        const lastMonthFirstDay = lastDay.startOf(\"month\");\n        const lastMonthStartDay = secondMonthLastDay.isSame(lastMonthFirstDay, \"week\") ? lastMonthFirstDay.add(1, \"week\") : lastMonthFirstDay;\n        return [[firstDay, firstMonthLastDay], [secondMonthStartDay.startOf(\"week\"), secondMonthLastDay], [lastMonthStartDay.startOf(\"week\"), lastDay]];\n      } else {\n        debugWarn(COMPONENT_NAME, \"start time and end time interval must not exceed two months\");\n        return [];\n      }\n    };\n\n    const pickDay = day => {\n      realSelectedDay.value = day;\n    };\n\n    const selectDate = type => {\n      let day;\n\n      if (type === \"prev-month\") {\n        day = prevMonthDayjs.value;\n      } else if (type === \"next-month\") {\n        day = nextMonthDayjs.value;\n      } else if (type === \"prev-year\") {\n        day = prevYearDayjs.value;\n      } else if (type === \"next-year\") {\n        day = nextYearDayjs.value;\n      } else {\n        day = now;\n      }\n\n      if (day.isSame(date.value, \"day\")) return;\n      pickDay(day);\n    };\n\n    useDeprecated({\n      from: '\"dateCell\"',\n      replacement: '\"date-cell\"',\n      scope: \"ElCalendar\",\n      version: \"2.3.0\",\n      ref: \"https://element-plus.org/en-US/component/calendar.html#slots\",\n      type: \"Slot\"\n    }, computed(() => !!solts.dateCell));\n    expose({\n      selectedDay: realSelectedDay,\n      pickDay,\n      selectDate,\n      calculateValidatedDateRange\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass(unref(ns).b())\n      }, [createElementVNode(\"div\", {\n        class: normalizeClass(unref(ns).e(\"header\"))\n      }, [renderSlot(_ctx.$slots, \"header\", {\n        date: unref(i18nDate)\n      }, () => [createElementVNode(\"div\", {\n        class: normalizeClass(unref(ns).e(\"title\"))\n      }, toDisplayString(unref(i18nDate)), 3), unref(validatedRange).length === 0 ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass(unref(ns).e(\"button-group\"))\n      }, [createVNode(unref(ElButtonGroup), null, {\n        default: withCtx(() => [createVNode(unref(ElButton), {\n          size: \"small\",\n          onClick: _cache[0] || (_cache[0] = $event => selectDate(\"prev-month\"))\n        }, {\n          default: withCtx(() => [createTextVNode(toDisplayString(unref(t)(\"el.datepicker.prevMonth\")), 1)]),\n          _: 1\n        }), createVNode(unref(ElButton), {\n          size: \"small\",\n          onClick: _cache[1] || (_cache[1] = $event => selectDate(\"today\"))\n        }, {\n          default: withCtx(() => [createTextVNode(toDisplayString(unref(t)(\"el.datepicker.today\")), 1)]),\n          _: 1\n        }), createVNode(unref(ElButton), {\n          size: \"small\",\n          onClick: _cache[2] || (_cache[2] = $event => selectDate(\"next-month\"))\n        }, {\n          default: withCtx(() => [createTextVNode(toDisplayString(unref(t)(\"el.datepicker.nextMonth\")), 1)]),\n          _: 1\n        })]),\n        _: 1\n      })], 2)) : createCommentVNode(\"v-if\", true)])], 2), unref(validatedRange).length === 0 ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass(unref(ns).e(\"body\"))\n      }, [createVNode(DateTable, {\n        date: unref(date),\n        \"selected-day\": unref(realSelectedDay),\n        onPick: pickDay\n      }, createSlots({\n        _: 2\n      }, [_ctx.$slots[\"date-cell\"] || _ctx.$slots.dateCell ? {\n        name: \"date-cell\",\n        fn: withCtx(data => [_ctx.$slots[\"date-cell\"] ? renderSlot(_ctx.$slots, \"date-cell\", normalizeProps(mergeProps({\n          key: 0\n        }, data))) : renderSlot(_ctx.$slots, \"dateCell\", normalizeProps(mergeProps({\n          key: 1\n        }, data)))])\n      } : void 0]), 1032, [\"date\", \"selected-day\"])], 2)) : (openBlock(), createElementBlock(\"div\", {\n        key: 1,\n        class: normalizeClass(unref(ns).e(\"body\"))\n      }, [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(validatedRange), (range_, index) => {\n        return openBlock(), createBlock(DateTable, {\n          key: index,\n          date: range_[0],\n          \"selected-day\": unref(realSelectedDay),\n          range: range_,\n          \"hide-header\": index !== 0,\n          onPick: pickDay\n        }, createSlots({\n          _: 2\n        }, [_ctx.$slots[\"date-cell\"] || _ctx.$slots.dateCell ? {\n          name: \"date-cell\",\n          fn: withCtx(data => [_ctx.$slots[\"date-cell\"] ? renderSlot(_ctx.$slots, \"date-cell\", normalizeProps(mergeProps({\n            key: 0\n          }, data))) : renderSlot(_ctx.$slots, \"dateCell\", normalizeProps(mergeProps({\n            key: 1\n          }, data)))])\n        } : void 0]), 1032, [\"date\", \"selected-day\", \"range\", \"hide-header\"]);\n      }), 128))], 2))], 2);\n    };\n  }\n\n});\n\nvar Calendar = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/calendar/src/calendar.vue\"]]);\n\nexport { Calendar as default };","map":{"version":3,"mappings":"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","names":["name","solts","useSlots","useNamespace","t","lang","useLocale","selectedDay","ref","now","locale","value","realSelectedDay","computed","get","props","date","set","val","toDate","emit","INPUT_EVENT","result","UPDATE_MODEL_EVENT","rangeArrDayjs","range","map","_","dayjs","startDayjs","endDayjs","isAfter","debugWarn","COMPONENT_NAME","add","month","modelValue","validatedRange","length","subtract","pickedMonth","format","year","firstDay","lastDay","firstMonth","lastMonth","isSameWeek","isSame","lastMonthFirstDay","lastMonthStartDay","firstMonthLastDay","startOf","secondMonthFirstDay","secondMonthStartDay","secondMonthLastDay","day","type","prevMonthDayjs","nextMonthDayjs","prevYearDayjs","nextYearDayjs","pickDay","useDeprecated","from","replacement","scope","version","dateCell","expose","selectDate","calculateValidatedDateRange"],"sources":["../../../../../../packages/components/calendar/src/calendar.vue"],"sourcesContent":["<template>\n  <div :class=\"ns.b()\">\n    <div :class=\"ns.e('header')\">\n      <slot name=\"header\" :date=\"i18nDate\">\n        <div :class=\"ns.e('title')\">{{ i18nDate }}</div>\n        <div v-if=\"validatedRange.length === 0\" :class=\"ns.e('button-group')\">\n          <el-button-group>\n            <el-button size=\"small\" @click=\"selectDate('prev-month')\">\n              {{ t('el.datepicker.prevMonth') }}\n            </el-button>\n            <el-button size=\"small\" @click=\"selectDate('today')\">\n              {{ t('el.datepicker.today') }}\n            </el-button>\n            <el-button size=\"small\" @click=\"selectDate('next-month')\">\n              {{ t('el.datepicker.nextMonth') }}\n            </el-button>\n          </el-button-group>\n        </div>\n      </slot>\n    </div>\n    <div v-if=\"validatedRange.length === 0\" :class=\"ns.e('body')\">\n      <date-table :date=\"date\" :selected-day=\"realSelectedDay\" @pick=\"pickDay\">\n        <template\n          v-if=\"$slots['date-cell'] || $slots.dateCell\"\n          #date-cell=\"data\"\n        >\n          <slot v-if=\"$slots['date-cell']\" name=\"date-cell\" v-bind=\"data\" />\n          <slot v-else name=\"dateCell\" v-bind=\"data\" />\n        </template>\n      </date-table>\n    </div>\n    <div v-else :class=\"ns.e('body')\">\n      <date-table\n        v-for=\"(range_, index) in validatedRange\"\n        :key=\"index\"\n        :date=\"range_[0]\"\n        :selected-day=\"realSelectedDay\"\n        :range=\"range_\"\n        :hide-header=\"index !== 0\"\n        @pick=\"pickDay\"\n      >\n        <template\n          v-if=\"$slots['date-cell'] || $slots.dateCell\"\n          #date-cell=\"data\"\n        >\n          <slot v-if=\"$slots['date-cell']\" name=\"date-cell\" v-bind=\"data\" />\n          <slot v-else name=\"dateCell\" v-bind=\"data\" />\n        </template>\n      </date-table>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, ref, useSlots } from 'vue'\nimport dayjs from 'dayjs'\nimport { ElButton, ElButtonGroup } from '@element-plus/components/button'\nimport { useDeprecated, useLocale, useNamespace } from '@element-plus/hooks'\nimport { debugWarn } from '@element-plus/utils'\nimport { INPUT_EVENT, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport DateTable from './date-table.vue'\nimport { calendarEmits, calendarProps } from './calendar'\n\nimport type { CalendarDateType } from './calendar'\nimport type { ComputedRef } from 'vue'\nimport type { Dayjs } from 'dayjs'\n\nconst COMPONENT_NAME = 'ElCalendar'\ndefineOptions({\n  name: COMPONENT_NAME,\n})\n\nconst props = defineProps(calendarProps)\nconst emit = defineEmits(calendarEmits)\n\nconst solts = useSlots()\nconst ns = useNamespace('calendar')\nconst { t, lang } = useLocale()\n\nconst selectedDay = ref<Dayjs>()\nconst now = dayjs().locale(lang.value)\n\nconst realSelectedDay = computed<Dayjs | undefined>({\n  get() {\n    if (!props.modelValue) return selectedDay.value\n    return date.value\n  },\n  set(val) {\n    if (!val) return\n    selectedDay.value = val\n    const result = val.toDate()\n\n    emit(INPUT_EVENT, result)\n    emit(UPDATE_MODEL_EVENT, result)\n  },\n})\n\n// if range is valid, we get a two-digit array\nconst validatedRange = computed(() => {\n  if (!props.range) return []\n  const rangeArrDayjs = props.range.map((_) => dayjs(_).locale(lang.value))\n  const [startDayjs, endDayjs] = rangeArrDayjs\n  if (startDayjs.isAfter(endDayjs)) {\n    debugWarn(COMPONENT_NAME, 'end time should be greater than start time')\n    return []\n  }\n  if (startDayjs.isSame(endDayjs, 'month')) {\n    // same month\n    return calculateValidatedDateRange(startDayjs, endDayjs)\n  } else {\n    // two months\n    if (startDayjs.add(1, 'month').month() !== endDayjs.month()) {\n      debugWarn(\n        COMPONENT_NAME,\n        'start time and end time interval must not exceed two months'\n      )\n      return []\n    }\n    return calculateValidatedDateRange(startDayjs, endDayjs)\n  }\n})\n\nconst date: ComputedRef<Dayjs> = computed(() => {\n  if (!props.modelValue) {\n    if (realSelectedDay.value) {\n      return realSelectedDay.value\n    } else if (validatedRange.value.length) {\n      return validatedRange.value[0][0]\n    }\n    return now\n  } else {\n    return dayjs(props.modelValue).locale(lang.value)\n  }\n})\nconst prevMonthDayjs = computed(() => date.value.subtract(1, 'month').date(1))\nconst nextMonthDayjs = computed(() => date.value.add(1, 'month').date(1))\nconst prevYearDayjs = computed(() => date.value.subtract(1, 'year').date(1))\nconst nextYearDayjs = computed(() => date.value.add(1, 'year').date(1))\n\nconst i18nDate = computed(() => {\n  const pickedMonth = `el.datepicker.month${date.value.format('M')}`\n  return `${date.value.year()} ${t('el.datepicker.year')} ${t(pickedMonth)}`\n})\n\n// https://github.com/element-plus/element-plus/issues/3155\n// Calculate the validate date range according to the start and end dates\nconst calculateValidatedDateRange = (\n  startDayjs: Dayjs,\n  endDayjs: Dayjs\n): [Dayjs, Dayjs][] => {\n  const firstDay = startDayjs.startOf('week')\n  const lastDay = endDayjs.endOf('week')\n  const firstMonth = firstDay.get('month')\n  const lastMonth = lastDay.get('month')\n\n  // Current mouth\n  if (firstMonth === lastMonth) {\n    return [[firstDay, lastDay]]\n  }\n  // Two adjacent months\n  else if (firstMonth + 1 === lastMonth) {\n    const firstMonthLastDay = firstDay.endOf('month')\n    const lastMonthFirstDay = lastDay.startOf('month')\n\n    // Whether the last day of the first month and the first day of the last month is in the same week\n    const isSameWeek = firstMonthLastDay.isSame(lastMonthFirstDay, 'week')\n    const lastMonthStartDay = isSameWeek\n      ? lastMonthFirstDay.add(1, 'week')\n      : lastMonthFirstDay\n\n    return [\n      [firstDay, firstMonthLastDay],\n      [lastMonthStartDay.startOf('week'), lastDay],\n    ]\n  }\n  // Three consecutive months (compatible: 2021-01-30 to 2021-02-28)\n  else if (\n    firstMonth + 2 === lastMonth ||\n    (firstMonth + 1) % 11 === lastMonth\n  ) {\n    const firstMonthLastDay = firstDay.endOf('month')\n    const secondMonthFirstDay = firstDay.add(1, 'month').startOf('month')\n\n    // Whether the last day of the first month and the second month is in the same week\n    const secondMonthStartDay = firstMonthLastDay.isSame(\n      secondMonthFirstDay,\n      'week'\n    )\n      ? secondMonthFirstDay.add(1, 'week')\n      : secondMonthFirstDay\n\n    const secondMonthLastDay = secondMonthStartDay.endOf('month')\n    const lastMonthFirstDay = lastDay.startOf('month')\n\n    // Whether the last day of the second month and the last day of the last month is in the same week\n    const lastMonthStartDay = secondMonthLastDay.isSame(\n      lastMonthFirstDay,\n      'week'\n    )\n      ? lastMonthFirstDay.add(1, 'week')\n      : lastMonthFirstDay\n\n    return [\n      [firstDay, firstMonthLastDay],\n      [secondMonthStartDay.startOf('week'), secondMonthLastDay],\n      [lastMonthStartDay.startOf('week'), lastDay],\n    ]\n  }\n  // Other cases\n  else {\n    debugWarn(\n      COMPONENT_NAME,\n      'start time and end time interval must not exceed two months'\n    )\n    return []\n  }\n}\n\nconst pickDay = (day: Dayjs) => {\n  realSelectedDay.value = day\n}\n\nconst selectDate = (type: CalendarDateType) => {\n  let day: Dayjs\n  if (type === 'prev-month') {\n    day = prevMonthDayjs.value\n  } else if (type === 'next-month') {\n    day = nextMonthDayjs.value\n  } else if (type === 'prev-year') {\n    day = prevYearDayjs.value\n  } else if (type === 'next-year') {\n    day = nextYearDayjs.value\n  } else {\n    day = now\n  }\n\n  if (day.isSame(date.value, 'day')) return\n  pickDay(day)\n}\n\nuseDeprecated(\n  {\n    from: '\"dateCell\"',\n    replacement: '\"date-cell\"',\n    scope: 'ElCalendar',\n    version: '2.3.0',\n    ref: 'https://element-plus.org/en-US/component/calendar.html#slots',\n    type: 'Slot',\n  },\n  computed(() => !!solts.dateCell)\n)\n\ndefineExpose({\n  /** @description currently selected date */\n  selectedDay: realSelectedDay,\n  /** @description select a specific date */\n  pickDay,\n  /** @description select date */\n  selectDate,\n  /** @description Calculate the validate date range according to the start and end dates */\n  calculateValidatedDateRange,\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}