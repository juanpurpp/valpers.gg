{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport '../../../../hooks/index.mjs';\nimport '../../../../utils/index.mjs';\nimport './index.mjs';\nimport { isArray } from '@vue/shared';\nimport { useFormItem, useFormItemInputId } from '../../../../hooks/use-form-item/index.mjs';\nimport { useCheckboxModel } from './use-checkbox-model.mjs';\nimport { useCheckboxStatus } from './use-checkbox-status.mjs';\nimport { useCheckboxDisabled } from './use-checkbox-disabled.mjs';\nimport { useCheckboxEvent } from './use-checkbox-event.mjs';\n\nconst setStoreValue = (props, {\n  model\n}) => {\n  function addToStore() {\n    if (isArray(model.value) && !model.value.includes(props.label)) {\n      model.value.push(props.label);\n    } else {\n      model.value = props.trueLabel || true;\n    }\n  }\n\n  props.checked && addToStore();\n};\n\nconst useCheckbox = (props, slots) => {\n  const {\n    formItem: elFormItem\n  } = useFormItem();\n  const {\n    model,\n    isGroup,\n    isLimitExceeded\n  } = useCheckboxModel(props);\n  const {\n    isFocused,\n    isChecked,\n    checkboxButtonSize,\n    checkboxSize,\n    hasOwnLabel\n  } = useCheckboxStatus(props, slots, {\n    model\n  });\n  const {\n    isDisabled\n  } = useCheckboxDisabled({\n    model,\n    isChecked\n  });\n  const {\n    inputId,\n    isLabeledByFormItem\n  } = useFormItemInputId(props, {\n    formItemContext: elFormItem,\n    disableIdGeneration: hasOwnLabel,\n    disableIdManagement: isGroup\n  });\n  const {\n    handleChange,\n    onClickRoot\n  } = useCheckboxEvent(props, {\n    model,\n    isLimitExceeded,\n    hasOwnLabel,\n    isDisabled,\n    isLabeledByFormItem\n  });\n  setStoreValue(props, {\n    model\n  });\n  return {\n    inputId,\n    isLabeledByFormItem,\n    isChecked,\n    isDisabled,\n    isFocused,\n    checkboxButtonSize,\n    checkboxSize,\n    hasOwnLabel,\n    model,\n    handleChange,\n    onClickRoot\n  };\n};\n\nexport { useCheckbox };","map":{"version":3,"mappings":";;;;;;;;;;;AAQA,MAAMA,aAAa,GAAG,CAACC,KAAD,EAAQ;EAAEC;AAAF,CAAR,KAAsB;EAC1C,SAASC,UAAT,GAAsB;IACpB,IAAIC,OAAO,CAACF,KAAK,CAACG,KAAP,CAAP,IAAwB,CAACH,KAAK,CAACG,KAAN,CAAYC,QAAZ,CAAqBL,KAAK,CAACM,KAA3B,CAA7B,EAAgE;MAC9DL,KAAK,CAACG,KAAN,CAAYG,IAAZ,CAAiBP,KAAK,CAACM,KAAvB;IACD,CAFD,MAEO;MACLL,KAAK,CAACG,KAAN,GAAcJ,KAAK,CAACQ,SAAN,IAAmB,IAAjC;IACD;EACF;;EACDR,KAAK,CAACS,OAAN,IAAiBP,UAAU,EAA3B;AACD,CATD;;AAUY,MAACQ,WAAW,GAAG,CAACV,KAAD,EAAQW,KAAR,KAAkB;EAC3C,MAAM;IAAEC,QAAQ,EAAEC;EAAZ,IAA2BC,WAAW,EAA5C;EACA,MAAM;IAAEb,KAAF;IAASc,OAAT;IAAkBC;EAAlB,IAAsCC,gBAAgB,CAACjB,KAAD,CAA5D;EACA,MAAM;IACJkB,SADI;IAEJC,SAFI;IAGJC,kBAHI;IAIJC,YAJI;IAKJC;EALI,IAMFC,iBAAiB,CAACvB,KAAD,EAAQW,KAAR,EAAe;IAAEV;EAAF,CAAf,CANrB;EAOA,MAAM;IAAEuB;EAAF,IAAiBC,mBAAmB,CAAC;IAAExB,KAAF;IAASkB;EAAT,CAAD,CAA1C;EACA,MAAM;IAAEO,OAAF;IAAWC;EAAX,IAAmCC,kBAAkB,CAAC5B,KAAD,EAAQ;IACjE6B,eAAe,EAAEhB,UADgD;IAEjEiB,mBAAmB,EAAER,WAF4C;IAGjES,mBAAmB,EAAEhB;EAH4C,CAAR,CAA3D;EAKA,MAAM;IAAEiB,YAAF;IAAgBC;EAAhB,IAAgCC,gBAAgB,CAAClC,KAAD,EAAQ;IAC5DC,KAD4D;IAE5De,eAF4D;IAG5DM,WAH4D;IAI5DE,UAJ4D;IAK5DG;EAL4D,CAAR,CAAtD;EAOA5B,aAAa,CAACC,KAAD,EAAQ;IAAEC;EAAF,CAAR,CAAb;EACA,OAAO;IACLyB,OADK;IAELC,mBAFK;IAGLR,SAHK;IAILK,UAJK;IAKLN,SALK;IAMLE,kBANK;IAOLC,YAPK;IAQLC,WARK;IASLrB,KATK;IAUL+B,YAVK;IAWLC;EAXK,CAAP;AAaF,CArCY","names":["setStoreValue","props","model","addToStore","isArray","value","includes","label","push","trueLabel","checked","useCheckbox","slots","formItem","elFormItem","useFormItem","isGroup","isLimitExceeded","useCheckboxModel","isFocused","isChecked","checkboxButtonSize","checkboxSize","hasOwnLabel","useCheckboxStatus","isDisabled","useCheckboxDisabled","inputId","isLabeledByFormItem","useFormItemInputId","formItemContext","disableIdGeneration","disableIdManagement","handleChange","onClickRoot","useCheckboxEvent"],"sources":["../../../../../../../packages/components/checkbox/src/composables/use-checkbox.ts"],"sourcesContent":["import { useFormItem, useFormItemInputId } from '@element-plus/hooks'\nimport { isArray } from '@element-plus/utils'\nimport {\n  useCheckboxDisabled,\n  useCheckboxEvent,\n  useCheckboxModel,\n  useCheckboxStatus,\n} from '../composables'\n\nimport type { ComponentInternalInstance } from 'vue'\nimport type { CheckboxProps } from '../checkbox'\nimport type { CheckboxModel } from '../composables'\n\nconst setStoreValue = (\n  props: CheckboxProps,\n  { model }: Pick<CheckboxModel, 'model'>\n) => {\n  function addToStore() {\n    if (isArray(model.value) && !model.value.includes(props.label)) {\n      model.value.push(props.label)\n    } else {\n      model.value = props.trueLabel || true\n    }\n  }\n  props.checked && addToStore()\n}\n\nexport const useCheckbox = (\n  props: CheckboxProps,\n  slots: ComponentInternalInstance['slots']\n) => {\n  const { formItem: elFormItem } = useFormItem()\n  const { model, isGroup, isLimitExceeded } = useCheckboxModel(props)\n  const {\n    isFocused,\n    isChecked,\n    checkboxButtonSize,\n    checkboxSize,\n    hasOwnLabel,\n  } = useCheckboxStatus(props, slots, { model })\n  const { isDisabled } = useCheckboxDisabled({ model, isChecked })\n  const { inputId, isLabeledByFormItem } = useFormItemInputId(props, {\n    formItemContext: elFormItem,\n    disableIdGeneration: hasOwnLabel,\n    disableIdManagement: isGroup,\n  })\n  const { handleChange, onClickRoot } = useCheckboxEvent(props, {\n    model,\n    isLimitExceeded,\n    hasOwnLabel,\n    isDisabled,\n    isLabeledByFormItem,\n  })\n\n  setStoreValue(props, { model })\n\n  return {\n    inputId,\n    isLabeledByFormItem,\n    isChecked,\n    isDisabled,\n    isFocused,\n    checkboxButtonSize,\n    checkboxSize,\n    hasOwnLabel,\n    model,\n    handleChange,\n    onClickRoot,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}