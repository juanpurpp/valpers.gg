{"ast":null,"code":"import { isVNode, shallowRef } from 'vue';\nimport '../../utils/index.mjs';\nimport { flattedChildren } from '../../utils/vue/vnode.mjs';\n\nconst getOrderedChildren = (vm, childComponentName, children) => {\n  const nodes = flattedChildren(vm.subTree).filter(n => {\n    var _a;\n\n    return isVNode(n) && ((_a = n.type) == null ? void 0 : _a.name) === childComponentName && !!n.component;\n  });\n  const uids = nodes.map(n => n.component.uid);\n  return uids.map(uid => children[uid]).filter(p => !!p);\n};\n\nconst useOrderedChildren = (vm, childComponentName) => {\n  const children = {};\n  const orderedChildren = shallowRef([]);\n\n  const addChild = child => {\n    children[child.uid] = child;\n    orderedChildren.value = getOrderedChildren(vm, childComponentName, children);\n  };\n\n  const removeChild = uid => {\n    delete children[uid];\n    orderedChildren.value = orderedChildren.value.filter(children2 => children2.uid !== uid);\n  };\n\n  return {\n    children: orderedChildren,\n    addChild,\n    removeChild\n  };\n};\n\nexport { useOrderedChildren };","map":{"version":3,"mappings":";;;;AAEA,MAAMA,kBAAkB,GAAG,CAACC,EAAD,EAAKC,kBAAL,EAAyBC,QAAzB,KAAsC;EAC/D,MAAMC,KAAK,GAAGC,eAAe,CAACJ,EAAE,CAACK,OAAJ,CAAf,CAA4BC,MAA5B,CAAoCC,CAAD,IAAO;IACtD,IAAIC,EAAJ;;IACA,OAAOC,OAAO,CAACF,CAAD,CAAP,IAAc,CAAC,CAACC,EAAE,GAAGD,CAAC,CAACG,IAAR,KAAiB,IAAjB,GAAwB,KAAK,CAA7B,GAAiCF,EAAE,CAACG,IAArC,MAA+CV,kBAA7D,IAAmF,CAAC,CAACM,CAAC,CAACK,SAA9F;EACD,CAHa,CAAd;EAIA,MAAMC,IAAI,GAAGV,KAAK,CAACW,GAAN,CAAWP,CAAD,IAAOA,CAAC,CAACK,SAAF,CAAYG,GAA7B,CAAb;EACA,OAAOF,IAAI,CAACC,GAAL,CAAUC,GAAD,IAASb,QAAQ,CAACa,GAAD,CAA1B,EAAiCT,MAAjC,CAAyCU,CAAD,IAAO,CAAC,CAACA,CAAjD,CAAP;AACD,CAPD;;AAQY,MAACC,kBAAkB,GAAG,CAACjB,EAAD,EAAKC,kBAAL,KAA4B;EAC5D,MAAMC,QAAQ,GAAG,EAAjB;EACA,MAAMgB,eAAe,GAAGC,UAAU,CAAC,EAAD,CAAlC;;EACA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;IAC1BnB,QAAQ,CAACmB,KAAK,CAACN,GAAP,CAAR,GAAsBM,KAAtB;IACAH,eAAe,CAACI,KAAhB,GAAwBvB,kBAAkB,CAACC,EAAD,EAAKC,kBAAL,EAAyBC,QAAzB,CAA1C;EACD,CAHD;;EAIA,MAAMqB,WAAW,GAAIR,GAAD,IAAS;IAC3B,OAAOb,QAAQ,CAACa,GAAD,CAAf;IACAG,eAAe,CAACI,KAAhB,GAAwBJ,eAAe,CAACI,KAAhB,CAAsBhB,MAAtB,CAA8BkB,SAAD,IAAeA,SAAS,CAACT,GAAV,KAAkBA,GAA9D,CAAxB;EACD,CAHD;;EAIA,OAAO;IACLb,QAAQ,EAAEgB,eADL;IAELE,QAFK;IAGLG;EAHK,CAAP;AAKF,CAhBY","names":["getOrderedChildren","vm","childComponentName","children","nodes","flattedChildren","subTree","filter","n","_a","isVNode","type","name","component","uids","map","uid","p","useOrderedChildren","orderedChildren","shallowRef","addChild","child","value","removeChild","children2"],"sources":["../../../../../packages/hooks/use-ordered-children/index.ts"],"sourcesContent":["import { shallowRef } from 'vue'\nimport { flattedChildren, isVNode } from '@element-plus/utils'\n\nimport type { ComponentInternalInstance, VNode } from 'vue'\n\nconst getOrderedChildren = <T>(\n  vm: ComponentInternalInstance,\n  childComponentName: string,\n  children: Record<number, T>\n): T[] => {\n  const nodes = flattedChildren(vm.subTree).filter(\n    (n): n is VNode =>\n      isVNode(n) &&\n      (n.type as any)?.name === childComponentName &&\n      !!n.component\n  )\n  const uids = nodes.map((n) => n.component!.uid)\n  return uids.map((uid) => children[uid]).filter((p) => !!p)\n}\n\nexport const useOrderedChildren = <T extends { uid: number }>(\n  vm: ComponentInternalInstance,\n  childComponentName: string\n) => {\n  const children: Record<number, T> = {}\n  const orderedChildren = shallowRef<T[]>([])\n\n  const addChild = (child: T) => {\n    children[child.uid] = child\n    orderedChildren.value = getOrderedChildren(vm, childComponentName, children)\n  }\n  const removeChild = (uid: number) => {\n    delete children[uid]\n    orderedChildren.value = orderedChildren.value.filter(\n      (children) => children.uid !== uid\n    )\n  }\n\n  return {\n    children: orderedChildren,\n    addChild,\n    removeChild,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}