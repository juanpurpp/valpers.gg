{"ast":null,"code":"import { inject, computed } from 'vue';\nimport '../../../../hooks/index.mjs';\nimport '../../../../utils/index.mjs';\nimport '../../../../tokens/index.mjs';\nimport { checkboxGroupContextKey } from '../../../../tokens/checkbox.mjs';\nimport { isUndefined } from '../../../../utils/types.mjs';\nimport { useDisabled } from '../../../../hooks/use-common-props/index.mjs';\n\nconst useCheckboxDisabled = ({\n  model,\n  isChecked\n}) => {\n  const checkboxGroup = inject(checkboxGroupContextKey, void 0);\n  const isLimitDisabled = computed(() => {\n    var _a, _b;\n\n    const max = (_a = checkboxGroup == null ? void 0 : checkboxGroup.max) == null ? void 0 : _a.value;\n    const min = (_b = checkboxGroup == null ? void 0 : checkboxGroup.min) == null ? void 0 : _b.value;\n    return !isUndefined(max) && model.value.length >= max && !isChecked.value || !isUndefined(min) && model.value.length <= min && isChecked.value;\n  });\n  const isDisabled = useDisabled(computed(() => (checkboxGroup == null ? void 0 : checkboxGroup.disabled.value) || isLimitDisabled.value));\n  return {\n    isDisabled,\n    isLimitDisabled\n  };\n};\n\nexport { useCheckboxDisabled };","map":{"version":3,"mappings":";;;;;;;;AAIY,MAACA,mBAAmB,GAAG,CAAC;EAClCC,KADkC;EAElCC;AAFkC,CAAD,KAG7B;EACJ,MAAMC,aAAa,GAAGC,MAAM,CAACC,uBAAD,EAA0B,KAAK,CAA/B,CAA5B;EACA,MAAMC,eAAe,GAAGC,QAAQ,CAAC,MAAM;IACrC,IAAIC,EAAJ,EAAQC,EAAR;;IACA,MAAMC,GAAG,GAAG,CAACF,EAAE,GAAGL,aAAa,IAAI,IAAjB,GAAwB,KAAK,CAA7B,GAAiCA,aAAa,CAACO,GAArD,KAA6D,IAA7D,GAAoE,KAAK,CAAzE,GAA6EF,EAAE,CAACG,KAA5F;IACA,MAAMC,GAAG,GAAG,CAACH,EAAE,GAAGN,aAAa,IAAI,IAAjB,GAAwB,KAAK,CAA7B,GAAiCA,aAAa,CAACS,GAArD,KAA6D,IAA7D,GAAoE,KAAK,CAAzE,GAA6EH,EAAE,CAACE,KAA5F;IACA,OAAO,CAACE,WAAW,CAACH,GAAD,CAAZ,IAAqBT,KAAK,CAACU,KAAN,CAAYG,MAAZ,IAAsBJ,GAA3C,IAAkD,CAACR,SAAS,CAACS,KAA7D,IAAsE,CAACE,WAAW,CAACD,GAAD,CAAZ,IAAqBX,KAAK,CAACU,KAAN,CAAYG,MAAZ,IAAsBF,GAA3C,IAAkDV,SAAS,CAACS,KAAzI;EACD,CAL+B,CAAhC;EAMA,MAAMI,UAAU,GAAGC,WAAW,CAACT,QAAQ,CAAC,MAAM,CAACJ,aAAa,IAAI,IAAjB,GAAwB,KAAK,CAA7B,GAAiCA,aAAa,CAACc,QAAd,CAAuBN,KAAzD,KAAmEL,eAAe,CAACK,KAA1F,CAAT,CAA9B;EACA,OAAO;IACLI,UADK;IAELT;EAFK,CAAP;AAIF,CAhBY","names":["useCheckboxDisabled","model","isChecked","checkboxGroup","inject","checkboxGroupContextKey","isLimitDisabled","computed","_a","_b","max","value","min","isUndefined","length","isDisabled","useDisabled","disabled"],"sources":["../../../../../../../packages/components/checkbox/src/composables/use-checkbox-disabled.ts"],"sourcesContent":["import { computed, inject } from 'vue'\nimport { useDisabled } from '@element-plus/hooks'\nimport { isUndefined } from '@element-plus/utils'\nimport { checkboxGroupContextKey } from '@element-plus/tokens'\n\nimport type { CheckboxModel, CheckboxStatus } from '../composables'\n\nexport const useCheckboxDisabled = ({\n  model,\n  isChecked,\n}: Pick<CheckboxModel, 'model'> & Pick<CheckboxStatus, 'isChecked'>) => {\n  const checkboxGroup = inject(checkboxGroupContextKey, undefined)\n\n  const isLimitDisabled = computed(() => {\n    const max = checkboxGroup?.max?.value\n    const min = checkboxGroup?.min?.value\n    return (\n      (!isUndefined(max) && model.value.length >= max && !isChecked.value) ||\n      (!isUndefined(min) && model.value.length <= min && isChecked.value)\n    )\n  })\n\n  const isDisabled = useDisabled(\n    computed(() => checkboxGroup?.disabled.value || isLimitDisabled.value)\n  )\n\n  return {\n    isDisabled,\n    isLimitDisabled,\n  }\n}\n\nexport type CheckboxDisabled = ReturnType<typeof useCheckboxDisabled>\n"]},"metadata":{},"sourceType":"module"}