{"ast":null,"code":"import { defineComponent, inject, toRef, ref, computed, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, renderSlot, Fragment, renderList, toDisplayString, createCommentVNode, createVNode, withCtx } from 'vue';\nimport dayjs from 'dayjs';\nimport { ElIcon } from '../../../icon/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport { DArrowLeft, DArrowRight } from '@element-plus/icons-vue';\nimport { panelMonthRangeProps, panelMonthRangeEmits } from '../props/panel-month-range.mjs';\nimport { useMonthRangeHeader } from '../composables/use-month-range-header.mjs';\nimport { useRangePicker } from '../composables/use-range-picker.mjs';\nimport MonthTable from './basic-month-table.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nconst _hoisted_1 = [\"onClick\"];\nconst _hoisted_2 = [\"disabled\"];\nconst _hoisted_3 = [\"disabled\"];\nconst unit = \"year\";\n\nconst __default__ = defineComponent({\n  name: \"DatePickerMonthRange\"\n});\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: panelMonthRangeProps,\n  emits: panelMonthRangeEmits,\n\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const {\n      lang\n    } = useLocale();\n    const pickerBase = inject(\"EP_PICKER_BASE\");\n    const {\n      shortcuts,\n      disabledDate,\n      format\n    } = pickerBase.props;\n    const defaultValue = toRef(pickerBase.props, \"defaultValue\");\n    const leftDate = ref(dayjs().locale(lang.value));\n    const rightDate = ref(dayjs().locale(lang.value).add(1, unit));\n    const {\n      minDate,\n      maxDate,\n      rangeState,\n      ppNs,\n      drpNs,\n      handleChangeRange,\n      handleRangeConfirm,\n      handleShortcutClick,\n      onSelect\n    } = useRangePicker(props, {\n      defaultValue,\n      leftDate,\n      rightDate,\n      unit,\n      onParsedValueChanged\n    });\n    const hasShortcuts = computed(() => !!shortcuts.length);\n    const {\n      leftPrevYear,\n      rightNextYear,\n      leftNextYear,\n      rightPrevYear,\n      leftLabel,\n      rightLabel,\n      leftYear,\n      rightYear\n    } = useMonthRangeHeader({\n      unlinkPanels: toRef(props, \"unlinkPanels\"),\n      leftDate,\n      rightDate\n    });\n    const enableYearArrow = computed(() => {\n      return props.unlinkPanels && rightYear.value > leftYear.value + 1;\n    });\n\n    const handleRangePick = (val, close = true) => {\n      const minDate_ = val.minDate;\n      const maxDate_ = val.maxDate;\n\n      if (maxDate.value === maxDate_ && minDate.value === minDate_) {\n        return;\n      }\n\n      maxDate.value = maxDate_;\n      minDate.value = minDate_;\n      if (!close) return;\n      handleRangeConfirm();\n    };\n\n    const formatToString = days => {\n      return days.map(day => day.format(format));\n    };\n\n    function onParsedValueChanged(minDate2, maxDate2) {\n      if (props.unlinkPanels && maxDate2) {\n        const minDateYear = (minDate2 == null ? void 0 : minDate2.year()) || 0;\n        const maxDateYear = maxDate2.year();\n        rightDate.value = minDateYear === maxDateYear ? maxDate2.add(1, unit) : maxDate2;\n      } else {\n        rightDate.value = leftDate.value.add(1, unit);\n      }\n    }\n\n    emit(\"set-picker-option\", [\"formatToString\", formatToString]);\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass([unref(ppNs).b(), unref(drpNs).b(), {\n          \"has-sidebar\": Boolean(_ctx.$slots.sidebar) || unref(hasShortcuts)\n        }])\n      }, [createElementVNode(\"div\", {\n        class: normalizeClass(unref(ppNs).e(\"body-wrapper\"))\n      }, [renderSlot(_ctx.$slots, \"sidebar\", {\n        class: normalizeClass(unref(ppNs).e(\"sidebar\"))\n      }), unref(hasShortcuts) ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass(unref(ppNs).e(\"sidebar\"))\n      }, [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(shortcuts), (shortcut, key) => {\n        return openBlock(), createElementBlock(\"button\", {\n          key,\n          type: \"button\",\n          class: normalizeClass(unref(ppNs).e(\"shortcut\")),\n          onClick: $event => unref(handleShortcutClick)(shortcut)\n        }, toDisplayString(shortcut.text), 11, _hoisted_1);\n      }), 128))], 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n        class: normalizeClass(unref(ppNs).e(\"body\"))\n      }, [createElementVNode(\"div\", {\n        class: normalizeClass([[unref(ppNs).e(\"content\"), unref(drpNs).e(\"content\")], \"is-left\"])\n      }, [createElementVNode(\"div\", {\n        class: normalizeClass(unref(drpNs).e(\"header\"))\n      }, [createElementVNode(\"button\", {\n        type: \"button\",\n        class: normalizeClass([unref(ppNs).e(\"icon-btn\"), \"d-arrow-left\"]),\n        onClick: _cache[0] || (_cache[0] = (...args) => unref(leftPrevYear) && unref(leftPrevYear)(...args))\n      }, [createVNode(unref(ElIcon), null, {\n        default: withCtx(() => [createVNode(unref(DArrowLeft))]),\n        _: 1\n      })], 2), _ctx.unlinkPanels ? (openBlock(), createElementBlock(\"button\", {\n        key: 0,\n        type: \"button\",\n        disabled: !unref(enableYearArrow),\n        class: normalizeClass([[unref(ppNs).e(\"icon-btn\"), {\n          [unref(ppNs).is(\"disabled\")]: !unref(enableYearArrow)\n        }], \"d-arrow-right\"]),\n        onClick: _cache[1] || (_cache[1] = (...args) => unref(leftNextYear) && unref(leftNextYear)(...args))\n      }, [createVNode(unref(ElIcon), null, {\n        default: withCtx(() => [createVNode(unref(DArrowRight))]),\n        _: 1\n      })], 10, _hoisted_2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", null, toDisplayString(unref(leftLabel)), 1)], 2), createVNode(MonthTable, {\n        \"selection-mode\": \"range\",\n        date: leftDate.value,\n        \"min-date\": unref(minDate),\n        \"max-date\": unref(maxDate),\n        \"range-state\": unref(rangeState),\n        \"disabled-date\": unref(disabledDate),\n        onChangerange: unref(handleChangeRange),\n        onPick: handleRangePick,\n        onSelect: unref(onSelect)\n      }, null, 8, [\"date\", \"min-date\", \"max-date\", \"range-state\", \"disabled-date\", \"onChangerange\", \"onSelect\"])], 2), createElementVNode(\"div\", {\n        class: normalizeClass([[unref(ppNs).e(\"content\"), unref(drpNs).e(\"content\")], \"is-right\"])\n      }, [createElementVNode(\"div\", {\n        class: normalizeClass(unref(drpNs).e(\"header\"))\n      }, [_ctx.unlinkPanels ? (openBlock(), createElementBlock(\"button\", {\n        key: 0,\n        type: \"button\",\n        disabled: !unref(enableYearArrow),\n        class: normalizeClass([[unref(ppNs).e(\"icon-btn\"), {\n          \"is-disabled\": !unref(enableYearArrow)\n        }], \"d-arrow-left\"]),\n        onClick: _cache[2] || (_cache[2] = (...args) => unref(rightPrevYear) && unref(rightPrevYear)(...args))\n      }, [createVNode(unref(ElIcon), null, {\n        default: withCtx(() => [createVNode(unref(DArrowLeft))]),\n        _: 1\n      })], 10, _hoisted_3)) : createCommentVNode(\"v-if\", true), createElementVNode(\"button\", {\n        type: \"button\",\n        class: normalizeClass([unref(ppNs).e(\"icon-btn\"), \"d-arrow-right\"]),\n        onClick: _cache[3] || (_cache[3] = (...args) => unref(rightNextYear) && unref(rightNextYear)(...args))\n      }, [createVNode(unref(ElIcon), null, {\n        default: withCtx(() => [createVNode(unref(DArrowRight))]),\n        _: 1\n      })], 2), createElementVNode(\"div\", null, toDisplayString(unref(rightLabel)), 1)], 2), createVNode(MonthTable, {\n        \"selection-mode\": \"range\",\n        date: rightDate.value,\n        \"min-date\": unref(minDate),\n        \"max-date\": unref(maxDate),\n        \"range-state\": unref(rangeState),\n        \"disabled-date\": unref(disabledDate),\n        onChangerange: unref(handleChangeRange),\n        onPick: handleRangePick,\n        onSelect: unref(onSelect)\n      }, null, 8, [\"date\", \"min-date\", \"max-date\", \"range-state\", \"disabled-date\", \"onChangerange\", \"onSelect\"])], 2)], 2)], 2)], 2);\n    };\n  }\n\n});\n\nvar MonthRangePickPanel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/panel-month-range.vue\"]]);\n\nexport { MonthRangePickPanel as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;mCAoHc;EACZA,IAAM;AADM;;;;;;;;;;IAQR;MAAEC;IAAF,IAAWC,SAAU,EAArB;IACA,mBAAaC,OAAO,gBAAP,CAAb;IACN,MAAM;MAAEC,SAAF;MAAaC,YAAb;MAA2BC;IAA3B,IAAsCC,UAAW,MAAvD;IACA,MAAMC,YAAe,SAAMD,UAAW,MAAjB,EAAwB,cAAxB,CAArB;IACA,MAAME,WAAWC,GAAI,SAAQC,MAAR,CAAeV,KAAKW,KAApB,EAArB;IACM,kBAAYF,GAAI,SAAQC,MAAR,CAAeV,IAAK,MAApB,EAA2BY,GAA3B,CAA+B,CAA/B,EAAkCC,IAAlC,EAAhB;IAEA;MACJC,OADI;MAEJC,OAFI;MAGJC,UAHI;MAIJC,IAJI;MAKJC,KALI;MAOJC,iBAPI;MAQJC,kBARI;MASJC,mBATI;MAUJC;IAVI,IAWFC,eAAeC,KAAf,EAAsB;MACxBjB,YADwB;MAExBC,QAFwB;MAGxBiB,SAHwB;MAIxBZ,IAJwB;MAKxBa;IALwB,CAAtB,CAXE;IAmBN,MAAMC,eAAeC,QAAS,OAAM,CAAC,CAACzB,UAAU0B,MAAlB,CAA9B;IAEM;MACJC,YADI;MAEJC,aAFI;MAGJC,YAHI;MAIJC,aAJI;MAKJC,SALI;MAMJC,UANI;MAOJC,QAPI;MAQJC;IARI,IASFC,mBAAoB;MACtBC,cAAcC,KAAM,QAAO,cAAP,CADE;MAEtBhC,QAFsB;MAGtBiB;IAHsB,EATlB;IAeA,wBAAkBG,SAAS,MAAM;MACrC,OAAOJ,KAAM,aAAN,IAAsBa,SAAU,MAAV,GAAkBD,SAASzB,KAAT,GAAiB,CAAhE;IACD,CAFuB,CAAlB;;IASN,MAAM8B,eAAkB,IAACC,GAAD,EAAsBC,QAAQ,IAA9B,KAAuC;MAK7D,MAAMC,WAAWF,GAAI,QAArB;MACA,MAAMG,WAAWH,GAAI,QAArB;;MACA,IAAI3B,OAAQ,MAAR,KAAkB8B,QAAlB,IAA8B/B,QAAQH,KAAR,KAAkBiC,QAApD,EAA8D;QAC5D;MACF;;MACA7B,QAAQJ,KAAR,GAAgBkC,QAAhB;MACA/B,QAAQH,KAAR,GAAgBiC,QAAhB;MAEA,IAAI,CAACD,KAAL,EAAY;MACOvB;IACrB,CAfA;;IAiBM,uBAAkB0B,IAAD,IAAmB;MACxC,OAAOA,KAAKC,GAAL,CAAUC,GAAD,IAASA,GAAI,OAAJ,CAAW3C,MAAX,CAAlB,CAAP;IACF,CAFM;;IAIN,8BACE4C,QADF,EAEEC,QAFF,EAGE;MACI,UAAMX,YAAN,IAAsBW,QAAtB,EAA+B;QAC3B,oBAAc,CAASD,mBAAU,MAAV,GAAUA,eAAnB,KAAmB,CAAjC;QACA,oBAAcC,SAAQC,IAAR,EAAd;QACN1B,UAAUd,KAAV,GACEyC,WAAgB,gBAAhB,GAA8BF,SAAQtC,GAAR,CAAY,CAAZ,EAAeC,IAAf,CAA9B,GAAqDqC,QADvD;MAEK,CALH,MAKG;QACLzB,UAAUd,KAAV,GAAkBH,SAASG,KAAT,CAAeC,GAAf,CAAmB,CAAnB,EAAsBC,IAAtB,CAAlB;MACF;IACF;;IAEAwC,KAAK,mBAAL,EAA0B,CAAC,gBAAD,EAAmBC,cAAnB,CAA1B","names":["name","lang","useLocale","inject","shortcuts","disabledDate","format","pickerBase","defaultValue","leftDate","ref","locale","value","add","unit","minDate","maxDate","rangeState","ppNs","drpNs","handleChangeRange","handleRangeConfirm","handleShortcutClick","onSelect","useRangePicker","props","rightDate","onParsedValueChanged","hasShortcuts","computed","length","leftPrevYear","rightNextYear","leftNextYear","rightPrevYear","leftLabel","rightLabel","leftYear","rightYear","useMonthRangeHeader","unlinkPanels","toRef","handleRangePick","val","close","minDate_","maxDate_","days","map","day","minDate2","maxDate2","year","minDateYear","emit","formatToString"],"sources":["../../../../../../../packages/components/date-picker/src/date-picker-com/panel-month-range.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[\n      ppNs.b(),\n      drpNs.b(),\n      {\n        'has-sidebar': Boolean($slots.sidebar) || hasShortcuts,\n      },\n    ]\"\n  >\n    <div :class=\"ppNs.e('body-wrapper')\">\n      <slot name=\"sidebar\" :class=\"ppNs.e('sidebar')\" />\n      <div v-if=\"hasShortcuts\" :class=\"ppNs.e('sidebar')\">\n        <button\n          v-for=\"(shortcut, key) in shortcuts\"\n          :key=\"key\"\n          type=\"button\"\n          :class=\"ppNs.e('shortcut')\"\n          @click=\"handleShortcutClick(shortcut)\"\n        >\n          {{ shortcut.text }}\n        </button>\n      </div>\n      <div :class=\"ppNs.e('body')\">\n        <div :class=\"[ppNs.e('content'), drpNs.e('content')]\" class=\"is-left\">\n          <div :class=\"drpNs.e('header')\">\n            <button\n              type=\"button\"\n              :class=\"ppNs.e('icon-btn')\"\n              class=\"d-arrow-left\"\n              @click=\"leftPrevYear\"\n            >\n              <el-icon><d-arrow-left /></el-icon>\n            </button>\n            <button\n              v-if=\"unlinkPanels\"\n              type=\"button\"\n              :disabled=\"!enableYearArrow\"\n              :class=\"[\n                ppNs.e('icon-btn'),\n                { [ppNs.is('disabled')]: !enableYearArrow },\n              ]\"\n              class=\"d-arrow-right\"\n              @click=\"leftNextYear\"\n            >\n              <el-icon><d-arrow-right /></el-icon>\n            </button>\n            <div>{{ leftLabel }}</div>\n          </div>\n          <month-table\n            selection-mode=\"range\"\n            :date=\"leftDate\"\n            :min-date=\"minDate\"\n            :max-date=\"maxDate\"\n            :range-state=\"rangeState\"\n            :disabled-date=\"disabledDate\"\n            @changerange=\"handleChangeRange\"\n            @pick=\"handleRangePick\"\n            @select=\"onSelect\"\n          />\n        </div>\n        <div :class=\"[ppNs.e('content'), drpNs.e('content')]\" class=\"is-right\">\n          <div :class=\"drpNs.e('header')\">\n            <button\n              v-if=\"unlinkPanels\"\n              type=\"button\"\n              :disabled=\"!enableYearArrow\"\n              :class=\"[ppNs.e('icon-btn'), { 'is-disabled': !enableYearArrow }]\"\n              class=\"d-arrow-left\"\n              @click=\"rightPrevYear\"\n            >\n              <el-icon><d-arrow-left /></el-icon>\n            </button>\n            <button\n              type=\"button\"\n              :class=\"ppNs.e('icon-btn')\"\n              class=\"d-arrow-right\"\n              @click=\"rightNextYear\"\n            >\n              <el-icon><d-arrow-right /></el-icon>\n            </button>\n            <div>{{ rightLabel }}</div>\n          </div>\n          <month-table\n            selection-mode=\"range\"\n            :date=\"rightDate\"\n            :min-date=\"minDate\"\n            :max-date=\"maxDate\"\n            :range-state=\"rangeState\"\n            :disabled-date=\"disabledDate\"\n            @changerange=\"handleChangeRange\"\n            @pick=\"handleRangePick\"\n            @select=\"onSelect\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, inject, ref, toRef } from 'vue'\nimport dayjs from 'dayjs'\nimport ElIcon from '@element-plus/components/icon'\nimport { useLocale } from '@element-plus/hooks'\nimport { DArrowLeft, DArrowRight } from '@element-plus/icons-vue'\nimport {\n  panelMonthRangeEmits,\n  panelMonthRangeProps,\n} from '../props/panel-month-range'\nimport { useMonthRangeHeader } from '../composables/use-month-range-header'\nimport { useRangePicker } from '../composables/use-range-picker'\nimport MonthTable from './basic-month-table.vue'\n\nimport type { Dayjs } from 'dayjs'\n\ndefineOptions({\n  name: 'DatePickerMonthRange',\n})\n\nconst props = defineProps(panelMonthRangeProps)\nconst emit = defineEmits(panelMonthRangeEmits)\nconst unit = 'year'\n\nconst { lang } = useLocale()\nconst pickerBase = inject('EP_PICKER_BASE') as any\nconst { shortcuts, disabledDate, format } = pickerBase.props\nconst defaultValue = toRef(pickerBase.props, 'defaultValue')\nconst leftDate = ref(dayjs().locale(lang.value))\nconst rightDate = ref(dayjs().locale(lang.value).add(1, unit))\n\nconst {\n  minDate,\n  maxDate,\n  rangeState,\n  ppNs,\n  drpNs,\n\n  handleChangeRange,\n  handleRangeConfirm,\n  handleShortcutClick,\n  onSelect,\n} = useRangePicker(props, {\n  defaultValue,\n  leftDate,\n  rightDate,\n  unit,\n  onParsedValueChanged,\n})\n\nconst hasShortcuts = computed(() => !!shortcuts.length)\n\nconst {\n  leftPrevYear,\n  rightNextYear,\n  leftNextYear,\n  rightPrevYear,\n  leftLabel,\n  rightLabel,\n  leftYear,\n  rightYear,\n} = useMonthRangeHeader({\n  unlinkPanels: toRef(props, 'unlinkPanels'),\n  leftDate,\n  rightDate,\n})\n\nconst enableYearArrow = computed(() => {\n  return props.unlinkPanels && rightYear.value > leftYear.value + 1\n})\n\ntype RangePickValue = {\n  minDate: Dayjs\n  maxDate: Dayjs\n}\n\nconst handleRangePick = (val: RangePickValue, close = true) => {\n  // const defaultTime = props.defaultTime || []\n  // const minDate_ = modifyWithTimeString(val.minDate, defaultTime[0])\n  // const maxDate_ = modifyWithTimeString(val.maxDate, defaultTime[1])\n  // todo\n  const minDate_ = val.minDate\n  const maxDate_ = val.maxDate\n  if (maxDate.value === maxDate_ && minDate.value === minDate_) {\n    return\n  }\n  maxDate.value = maxDate_\n  minDate.value = minDate_\n\n  if (!close) return\n  handleRangeConfirm()\n}\n\nconst formatToString = (days: Dayjs[]) => {\n  return days.map((day) => day.format(format))\n}\n\nfunction onParsedValueChanged(\n  minDate: Dayjs | undefined,\n  maxDate: Dayjs | undefined\n) {\n  if (props.unlinkPanels && maxDate) {\n    const minDateYear = minDate?.year() || 0\n    const maxDateYear = maxDate.year()\n    rightDate.value =\n      minDateYear === maxDateYear ? maxDate.add(1, unit) : maxDate\n  } else {\n    rightDate.value = leftDate.value.add(1, unit)\n  }\n}\n\nemit('set-picker-option', ['formatToString', formatToString])\n</script>\n"]},"metadata":{},"sourceType":"module"}