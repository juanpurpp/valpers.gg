{"ast":null,"code":"import { defineComponent, getCurrentInstance, inject, ref, watch, nextTick, openBlock, createElementBlock, normalizeClass, unref, normalizeStyle } from 'vue';\nimport { useResizeObserver } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { tabBarProps } from './tab-bar.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { tabsRootContextKey } from '../../../tokens/tabs.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { capitalize } from '../../../utils/strings.mjs';\nconst COMPONENT_NAME = \"ElTabBar\";\n\nconst __default__ = defineComponent({\n  name: COMPONENT_NAME\n});\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: tabBarProps,\n\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    const instance = getCurrentInstance();\n    const rootTabs = inject(tabsRootContextKey);\n    if (!rootTabs) throwError(COMPONENT_NAME, \"<el-tabs><el-tab-bar /></el-tabs>\");\n    const ns = useNamespace(\"tabs\");\n    const barRef = ref();\n    const barStyle = ref();\n\n    const getBarStyle = () => {\n      let offset = 0;\n      let tabSize = 0;\n      const sizeName = [\"top\", \"bottom\"].includes(rootTabs.props.tabPosition) ? \"width\" : \"height\";\n      const sizeDir = sizeName === \"width\" ? \"x\" : \"y\";\n      props.tabs.every(tab => {\n        var _a, _b, _c, _d;\n\n        const $el = (_b = (_a = instance.parent) == null ? void 0 : _a.refs) == null ? void 0 : _b[`tab-${tab.uid}`];\n        if (!$el) return false;\n\n        if (!tab.active) {\n          return true;\n        }\n\n        tabSize = $el[`client${capitalize(sizeName)}`];\n        const position = sizeDir === \"x\" ? \"left\" : \"top\";\n        offset = $el[`offset${capitalize(position)}`] - ((_d = (_c = $el.parentElement) == null ? void 0 : _c[`offset${capitalize(position)}`]) != null ? _d : 0);\n        const scrollwrapEl = $el.closest(\".is-scrollable\");\n\n        if (scrollwrapEl) {\n          const scrollWrapStyle = window.getComputedStyle(scrollwrapEl);\n          offset += Number.parseFloat(scrollWrapStyle[`padding${capitalize(position)}`]);\n        }\n\n        const tabStyles = window.getComputedStyle($el);\n\n        if (sizeName === \"width\") {\n          if (props.tabs.length > 1) {\n            tabSize -= Number.parseFloat(tabStyles.paddingLeft) + Number.parseFloat(tabStyles.paddingRight);\n          }\n\n          offset += Number.parseFloat(tabStyles.paddingLeft);\n        }\n\n        return false;\n      });\n      return {\n        [sizeName]: `${tabSize}px`,\n        transform: `translate${capitalize(sizeDir)}(${offset}px)`\n      };\n    };\n\n    const update = () => barStyle.value = getBarStyle();\n\n    watch(() => props.tabs, async () => {\n      await nextTick();\n      update();\n    }, {\n      immediate: true\n    });\n    useResizeObserver(barRef, () => update());\n    expose({\n      ref: barRef,\n      update\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        ref_key: \"barRef\",\n        ref: barRef,\n        class: normalizeClass([unref(ns).e(\"active-bar\"), unref(ns).is(unref(rootTabs).props.tabPosition)]),\n        style: normalizeStyle(barStyle.value)\n      }, null, 6);\n    };\n  }\n\n});\n\nvar TabBar = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tabs/src/tab-bar.vue\"]]);\n\nexport { TabBar as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;mCAmBc;EACZA,IAAM;AADM;;;;;;;;;IAKd,MAAMC,WAAWC,kBAAmB,EAApC;IACM,iBAAWC,OAAOC,kBAAP,CAAX;IACN,IAAI,CAACC,QAAL,EAAeC,WAAWC,cAAX,EAA2B,mCAA3B;IAET,WAAKC,aAAa,MAAb,CAAL;IAEN,MAAMC,SAASC,GAAoB,EAAnC;IACA,MAAMC,WAAWD,GAAmB,EAApC;;IAEA,MAAME,cAAc,MAAqB;MACvC,IAAIC,MAAS,IAAb;MACA,IAAIC,OAAU,IAAd;MAEM,iBAAW,CAAC,KAAD,EAAQ,QAAR,EAAkBC,QAAlB,CAA2BV,QAAS,MAAT,CAAeW,WAA1C,IACb,OADa,GAEb,QAFE;MAGA,gBAAUC,QAAa,YAAb,GAAuB,GAAvB,GAA6B,GAAvC;MAEAC,WAAKC,KAAL,CAAYC,GAAD,IAAS;QACxB,QAAYC,EAAZ,EAAYC,EAAZ,EAAYC,EAAZ;;QACA,MAAKC,sGAAL;QAAiB,UAEb,OAAK,KAAL;;QACK;UACT;QAEU;;QACJV,uBAAuBW,oBAAe,EAAtC;QAGJ,cAAa,qBAAmB,MAAnB,GAAmB,KAAhC;QAGIZ,sBAAmBY,WAAQC,QAAR,CAAwB,EAA3C,KAA2C,uGAA3C;QACN,MAAkBC,4CAAlB;;QACQ;UACN,qBACE,2BAA0BA,YAA1B,CADF;UAGFd;QAEM;;QAEN,kBAA0Be,4BAA1B;;QACM,YAAM,KAAK,OAAX,EAAoB;UAEpB;YAEJd;UACU;;UACZD;QACO;;QACR;MAEM,CApCD;MAqCJ;QACA,CAAWI,QAAX,GAAW,UAAY,IADvB;QAEFY;MAFE;IAKJ,CAnDA;;IAsDE,YAAM,GAAM,cACA,MADA,GACAjB,aADZ;;IAEEkB,YAAeZ,UAAf,EAAe;MACR;MAETa,MAAa;IAEG,CALd,EAKc;MAAAC;IAAA,CALd;IAOSC;IAAAC,MAEN;MAELxB,WAFK;MAGNqB;IAHM,EAFM","names":["name","instance","getCurrentInstance","inject","tabsRootContextKey","rootTabs","throwError","COMPONENT_NAME","useNamespace","barRef","ref","barStyle","getBarStyle","offset","tabSize","includes","tabPosition","sizeName","props","every","tab","_b","_c","_d","$el","capitalize","position","scrollwrapEl","window","transform","watch","update","immediate","useResizeObserver","expose"],"sources":["../../../../../../packages/components/tabs/src/tab-bar.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"barRef\"\n    :class=\"[ns.e('active-bar'), ns.is(rootTabs.props.tabPosition)]\"\n    :style=\"barStyle\"\n  />\n</template>\n\n<script lang=\"ts\" setup>\nimport { getCurrentInstance, inject, nextTick, ref, watch } from 'vue'\nimport { useResizeObserver } from '@vueuse/core'\nimport { capitalize, throwError } from '@element-plus/utils'\nimport { tabsRootContextKey } from '@element-plus/tokens'\nimport { useNamespace } from '@element-plus/hooks'\nimport { tabBarProps } from './tab-bar'\n\nimport type { CSSProperties } from 'vue'\n\nconst COMPONENT_NAME = 'ElTabBar'\ndefineOptions({\n  name: COMPONENT_NAME,\n})\nconst props = defineProps(tabBarProps)\n\nconst instance = getCurrentInstance()!\nconst rootTabs = inject(tabsRootContextKey)\nif (!rootTabs) throwError(COMPONENT_NAME, '<el-tabs><el-tab-bar /></el-tabs>')\n\nconst ns = useNamespace('tabs')\n\nconst barRef = ref<HTMLDivElement>()\nconst barStyle = ref<CSSProperties>()\n\nconst getBarStyle = (): CSSProperties => {\n  let offset = 0\n  let tabSize = 0\n\n  const sizeName = ['top', 'bottom'].includes(rootTabs.props.tabPosition)\n    ? 'width'\n    : 'height'\n  const sizeDir = sizeName === 'width' ? 'x' : 'y'\n\n  props.tabs.every((tab) => {\n    const $el = instance.parent?.refs?.[`tab-${tab.uid}`] as HTMLElement\n    if (!$el) return false\n\n    if (!tab.active) {\n      return true\n    }\n\n    tabSize = $el[`client${capitalize(sizeName)}`]\n    const position = sizeDir === 'x' ? 'left' : 'top'\n\n    offset =\n      $el[`offset${capitalize(position)}`] -\n      ($el.parentElement?.[`offset${capitalize(position)}`] ?? 0)\n\n    const scrollwrapEl = $el.closest('.is-scrollable')\n    if (scrollwrapEl) {\n      const scrollWrapStyle = window.getComputedStyle(scrollwrapEl)\n      offset += Number.parseFloat(\n        scrollWrapStyle[`padding${capitalize(position)}`]\n      )\n    }\n\n    const tabStyles = window.getComputedStyle($el)\n\n    if (sizeName === 'width') {\n      if (props.tabs.length > 1) {\n        tabSize -=\n          Number.parseFloat(tabStyles.paddingLeft) +\n          Number.parseFloat(tabStyles.paddingRight)\n      }\n      offset += Number.parseFloat(tabStyles.paddingLeft)\n    }\n    return false\n  })\n\n  return {\n    [sizeName]: `${tabSize}px`,\n    transform: `translate${capitalize(sizeDir)}(${offset}px)`,\n  }\n}\n\nconst update = () => (barStyle.value = getBarStyle())\n\nwatch(\n  () => props.tabs,\n  async () => {\n    await nextTick()\n    update()\n  },\n  { immediate: true }\n)\nuseResizeObserver(barRef, () => update())\n\ndefineExpose({\n  /** @description tab root html element */\n  ref: barRef,\n  /** @description method to manually update tab bar style */\n  update,\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}