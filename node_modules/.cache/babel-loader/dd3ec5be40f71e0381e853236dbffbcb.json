{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport { ref, onMounted, onBeforeUnmount } from 'vue';\nimport { FOCUSOUT_PREVENTED, FOCUSOUT_PREVENTED_OPTS } from './tokens.mjs';\nconst focusReason = ref();\nconst lastUserFocusTimestamp = ref(0);\nconst lastAutomatedFocusTimestamp = ref(0);\nlet focusReasonUserCount = 0;\n\nconst obtainAllFocusableElements = element => {\n  const nodes = [];\n  const walker = document.createTreeWalker(element, NodeFilter.SHOW_ELEMENT, {\n    acceptNode: node => {\n      const isHiddenInput = node.tagName === \"INPUT\" && node.type === \"hidden\";\n      if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;\n      return node.tabIndex >= 0 || node === document.activeElement ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n    }\n  });\n\n  while (walker.nextNode()) nodes.push(walker.currentNode);\n\n  return nodes;\n};\n\nconst getVisibleElement = (elements, container) => {\n  for (const element of elements) {\n    if (!isHidden(element, container)) return element;\n  }\n};\n\nconst isHidden = (element, container) => {\n  if (process.env.NODE_ENV === \"test\") return false;\n  if (getComputedStyle(element).visibility === \"hidden\") return true;\n\n  while (element) {\n    if (container && element === container) return false;\n    if (getComputedStyle(element).display === \"none\") return true;\n    element = element.parentElement;\n  }\n\n  return false;\n};\n\nconst getEdges = container => {\n  const focusable = obtainAllFocusableElements(container);\n  const first = getVisibleElement(focusable, container);\n  const last = getVisibleElement(focusable.reverse(), container);\n  return [first, last];\n};\n\nconst isSelectable = element => {\n  return element instanceof HTMLInputElement && \"select\" in element;\n};\n\nconst tryFocus = (element, shouldSelect) => {\n  if (element && element.focus) {\n    const prevFocusedElement = document.activeElement;\n    element.focus({\n      preventScroll: true\n    });\n    lastAutomatedFocusTimestamp.value = window.performance.now();\n\n    if (element !== prevFocusedElement && isSelectable(element) && shouldSelect) {\n      element.select();\n    }\n  }\n};\n\nfunction removeFromStack(list, item) {\n  const copy = [...list];\n  const idx = list.indexOf(item);\n\n  if (idx !== -1) {\n    copy.splice(idx, 1);\n  }\n\n  return copy;\n}\n\nconst createFocusableStack = () => {\n  let stack = [];\n\n  const push = layer => {\n    const currentLayer = stack[0];\n\n    if (currentLayer && layer !== currentLayer) {\n      currentLayer.pause();\n    }\n\n    stack = removeFromStack(stack, layer);\n    stack.unshift(layer);\n  };\n\n  const remove = layer => {\n    var _a, _b;\n\n    stack = removeFromStack(stack, layer);\n    (_b = (_a = stack[0]) == null ? void 0 : _a.resume) == null ? void 0 : _b.call(_a);\n  };\n\n  return {\n    push,\n    remove\n  };\n};\n\nconst focusFirstDescendant = (elements, shouldSelect = false) => {\n  const prevFocusedElement = document.activeElement;\n\n  for (const element of elements) {\n    tryFocus(element, shouldSelect);\n    if (document.activeElement !== prevFocusedElement) return;\n  }\n};\n\nconst focusableStack = createFocusableStack();\n\nconst isFocusCausedByUserEvent = () => {\n  return lastUserFocusTimestamp.value > lastAutomatedFocusTimestamp.value;\n};\n\nconst notifyFocusReasonPointer = () => {\n  focusReason.value = \"pointer\";\n  lastUserFocusTimestamp.value = window.performance.now();\n};\n\nconst notifyFocusReasonKeydown = () => {\n  focusReason.value = \"keyboard\";\n  lastUserFocusTimestamp.value = window.performance.now();\n};\n\nconst useFocusReason = () => {\n  onMounted(() => {\n    if (focusReasonUserCount === 0) {\n      document.addEventListener(\"mousedown\", notifyFocusReasonPointer);\n      document.addEventListener(\"touchstart\", notifyFocusReasonPointer);\n      document.addEventListener(\"keydown\", notifyFocusReasonKeydown);\n    }\n\n    focusReasonUserCount++;\n  });\n  onBeforeUnmount(() => {\n    focusReasonUserCount--;\n\n    if (focusReasonUserCount <= 0) {\n      document.removeEventListener(\"mousedown\", notifyFocusReasonPointer);\n      document.removeEventListener(\"touchstart\", notifyFocusReasonPointer);\n      document.removeEventListener(\"keydown\", notifyFocusReasonKeydown);\n    }\n  });\n  return {\n    focusReason,\n    lastUserFocusTimestamp,\n    lastAutomatedFocusTimestamp\n  };\n};\n\nconst createFocusOutPreventedEvent = detail => {\n  return new CustomEvent(FOCUSOUT_PREVENTED, { ...FOCUSOUT_PREVENTED_OPTS,\n    detail\n  });\n};\n\nexport { createFocusOutPreventedEvent, focusFirstDescendant, focusableStack, getEdges, getVisibleElement, isFocusCausedByUserEvent, isHidden, obtainAllFocusableElements, tryFocus, useFocusReason };","map":{"version":3,"mappings":"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","names":["focusReason","ref","lastUserFocusTimestamp","lastAutomatedFocusTimestamp","focusReasonUserCount","obtainAllFocusableElements","element","nodes","walker","document","createTreeWalker","NodeFilter","SHOW_ELEMENT","acceptNode","node","isHiddenInput","tagName","type","disabled","hidden","FILTER_SKIP","tabIndex","activeElement","FILTER_ACCEPT","nextNode","push","currentNode","getVisibleElement","elements","container","isHidden","process","env","NODE_ENV","getComputedStyle","visibility","display","parentElement","getEdges","focusable","first","last","reverse","isSelectable","HTMLInputElement","tryFocus","shouldSelect","focus","prevFocusedElement","preventScroll","value","window","performance","now","select","removeFromStack","list","item","copy","idx","indexOf","splice","createFocusableStack","stack","layer","currentLayer","pause","unshift","remove","_a","_b","resume","call","focusFirstDescendant","focusableStack","isFocusCausedByUserEvent","notifyFocusReasonPointer","notifyFocusReasonKeydown","useFocusReason","onMounted","addEventListener","onBeforeUnmount","removeEventListener","createFocusOutPreventedEvent","detail","CustomEvent","FOCUSOUT_PREVENTED","FOCUSOUT_PREVENTED_OPTS"],"sources":["../../../../../../packages/components/focus-trap/src/utils.ts"],"sourcesContent":["import { onBeforeUnmount, onMounted, ref } from 'vue'\nimport { FOCUSOUT_PREVENTED, FOCUSOUT_PREVENTED_OPTS } from './tokens'\n\nconst focusReason = ref<'pointer' | 'keyboard'>()\nconst lastUserFocusTimestamp = ref<number>(0)\nconst lastAutomatedFocusTimestamp = ref<number>(0)\nlet focusReasonUserCount = 0\n\nexport type FocusLayer = {\n  paused: boolean\n  pause: () => void\n  resume: () => void\n}\n\nexport type FocusStack = FocusLayer[]\n\nexport const obtainAllFocusableElements = (\n  element: HTMLElement\n): HTMLElement[] => {\n  const nodes: HTMLElement[] = []\n  const walker = document.createTreeWalker(element, NodeFilter.SHOW_ELEMENT, {\n    acceptNode: (\n      node: Element & {\n        disabled: boolean\n        hidden: boolean\n        type: string\n        tabIndex: number\n      }\n    ) => {\n      const isHiddenInput = node.tagName === 'INPUT' && node.type === 'hidden'\n      if (node.disabled || node.hidden || isHiddenInput)\n        return NodeFilter.FILTER_SKIP\n      return node.tabIndex >= 0 || node === document.activeElement\n        ? NodeFilter.FILTER_ACCEPT\n        : NodeFilter.FILTER_SKIP\n    },\n  })\n  while (walker.nextNode()) nodes.push(walker.currentNode as HTMLElement)\n\n  return nodes\n}\n\nexport const getVisibleElement = (\n  elements: HTMLElement[],\n  container: HTMLElement\n) => {\n  for (const element of elements) {\n    if (!isHidden(element, container)) return element\n  }\n}\n\nexport const isHidden = (element: HTMLElement, container: HTMLElement) => {\n  if (process.env.NODE_ENV === 'test') return false\n  if (getComputedStyle(element).visibility === 'hidden') return true\n\n  while (element) {\n    if (container && element === container) return false\n    if (getComputedStyle(element).display === 'none') return true\n    element = element.parentElement as HTMLElement\n  }\n\n  return false\n}\n\nexport const getEdges = (container: HTMLElement) => {\n  const focusable = obtainAllFocusableElements(container)\n  const first = getVisibleElement(focusable, container)\n  const last = getVisibleElement(focusable.reverse(), container)\n  return [first, last]\n}\n\nconst isSelectable = (\n  element: any\n): element is HTMLInputElement & { select: () => void } => {\n  return element instanceof HTMLInputElement && 'select' in element\n}\n\nexport const tryFocus = (\n  element?: HTMLElement | { focus: () => void } | null,\n  shouldSelect?: boolean\n) => {\n  if (element && element.focus) {\n    const prevFocusedElement = document.activeElement\n    element.focus({ preventScroll: true })\n    lastAutomatedFocusTimestamp.value = window.performance.now()\n    if (\n      element !== prevFocusedElement &&\n      isSelectable(element) &&\n      shouldSelect\n    ) {\n      element.select()\n    }\n  }\n}\n\nfunction removeFromStack<T>(list: T[], item: T) {\n  const copy = [...list]\n\n  const idx = list.indexOf(item)\n\n  if (idx !== -1) {\n    copy.splice(idx, 1)\n  }\n  return copy\n}\n\nconst createFocusableStack = () => {\n  let stack = [] as FocusStack\n\n  const push = (layer: FocusLayer) => {\n    const currentLayer = stack[0]\n\n    if (currentLayer && layer !== currentLayer) {\n      currentLayer.pause()\n    }\n\n    stack = removeFromStack(stack, layer)\n    stack.unshift(layer)\n  }\n\n  const remove = (layer: FocusLayer) => {\n    stack = removeFromStack(stack, layer)\n    stack[0]?.resume?.()\n  }\n\n  return {\n    push,\n    remove,\n  }\n}\n\nexport const focusFirstDescendant = (\n  elements: HTMLElement[],\n  shouldSelect = false\n) => {\n  const prevFocusedElement = document.activeElement\n  for (const element of elements) {\n    tryFocus(element, shouldSelect)\n    if (document.activeElement !== prevFocusedElement) return\n  }\n}\n\nexport const focusableStack = createFocusableStack()\n\nexport const isFocusCausedByUserEvent = (): boolean => {\n  return lastUserFocusTimestamp.value > lastAutomatedFocusTimestamp.value\n}\n\nconst notifyFocusReasonPointer = () => {\n  focusReason.value = 'pointer'\n  lastUserFocusTimestamp.value = window.performance.now()\n}\n\nconst notifyFocusReasonKeydown = () => {\n  focusReason.value = 'keyboard'\n  lastUserFocusTimestamp.value = window.performance.now()\n}\n\nexport const useFocusReason = (): {\n  focusReason: typeof focusReason\n  lastUserFocusTimestamp: typeof lastUserFocusTimestamp\n  lastAutomatedFocusTimestamp: typeof lastAutomatedFocusTimestamp\n} => {\n  onMounted(() => {\n    if (focusReasonUserCount === 0) {\n      document.addEventListener('mousedown', notifyFocusReasonPointer)\n      document.addEventListener('touchstart', notifyFocusReasonPointer)\n      document.addEventListener('keydown', notifyFocusReasonKeydown)\n    }\n    focusReasonUserCount++\n  })\n\n  onBeforeUnmount(() => {\n    focusReasonUserCount--\n    if (focusReasonUserCount <= 0) {\n      document.removeEventListener('mousedown', notifyFocusReasonPointer)\n      document.removeEventListener('touchstart', notifyFocusReasonPointer)\n      document.removeEventListener('keydown', notifyFocusReasonKeydown)\n    }\n  })\n\n  return {\n    focusReason,\n    lastUserFocusTimestamp,\n    lastAutomatedFocusTimestamp,\n  }\n}\n\nexport const createFocusOutPreventedEvent = (\n  detail: CustomEventInit['detail']\n) => {\n  return new CustomEvent(FOCUSOUT_PREVENTED, {\n    ...FOCUSOUT_PREVENTED_OPTS,\n    detail,\n  })\n}\n"]},"metadata":{},"sourceType":"module"}