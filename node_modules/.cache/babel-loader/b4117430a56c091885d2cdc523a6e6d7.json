{"ast":null,"code":"import { inject, getCurrentInstance, nextTick, computed, watch } from 'vue';\nimport '../../../../hooks/index.mjs';\nimport '../../../../tokens/index.mjs';\nimport '../../../../utils/index.mjs';\nimport { checkboxGroupContextKey } from '../../../../tokens/checkbox.mjs';\nimport { useFormItem } from '../../../../hooks/use-form-item/index.mjs';\nimport { debugWarn } from '../../../../utils/error.mjs';\n\nconst useCheckboxEvent = (props, {\n  model,\n  isLimitExceeded,\n  hasOwnLabel,\n  isDisabled,\n  isLabeledByFormItem\n}) => {\n  const checkboxGroup = inject(checkboxGroupContextKey, void 0);\n  const {\n    formItem\n  } = useFormItem();\n  const {\n    emit\n  } = getCurrentInstance();\n\n  function getLabeledValue(value) {\n    var _a, _b;\n\n    return value === props.trueLabel || value === true ? (_a = props.trueLabel) != null ? _a : true : (_b = props.falseLabel) != null ? _b : false;\n  }\n\n  function emitChangeEvent(checked, e) {\n    emit(\"change\", getLabeledValue(checked), e);\n  }\n\n  function handleChange(e) {\n    if (isLimitExceeded.value) return;\n    const target = e.target;\n    emit(\"change\", getLabeledValue(target.checked), e);\n  }\n\n  async function onClickRoot(e) {\n    if (isLimitExceeded.value) return;\n\n    if (!hasOwnLabel.value && !isDisabled.value && isLabeledByFormItem.value) {\n      const eventTargets = e.composedPath();\n      const hasLabel = eventTargets.some(item => item.tagName === \"LABEL\");\n\n      if (!hasLabel) {\n        model.value = getLabeledValue([false, props.falseLabel].includes(model.value));\n        await nextTick();\n        emitChangeEvent(model.value, e);\n      }\n    }\n  }\n\n  const validateEvent = computed(() => (checkboxGroup == null ? void 0 : checkboxGroup.validateEvent) || props.validateEvent);\n  watch(() => props.modelValue, () => {\n    if (validateEvent.value) {\n      formItem == null ? void 0 : formItem.validate(\"change\").catch(err => debugWarn(err));\n    }\n  });\n  return {\n    handleChange,\n    onClickRoot\n  };\n};\n\nexport { useCheckboxEvent };","map":{"version":3,"mappings":";;;;;;;;AAIY,MAACA,gBAAgB,GAAG,CAACC,KAAD,EAAQ;EACtCC,KADsC;EAEtCC,eAFsC;EAGtCC,WAHsC;EAItCC,UAJsC;EAKtCC;AALsC,CAAR,KAM1B;EACJ,MAAMC,aAAa,GAAGC,MAAM,CAACC,uBAAD,EAA0B,KAAK,CAA/B,CAA5B;EACA,MAAM;IAAEC;EAAF,IAAeC,WAAW,EAAhC;EACA,MAAM;IAAEC;EAAF,IAAWC,kBAAkB,EAAnC;;EACA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;IAC9B,IAAIC,EAAJ,EAAQC,EAAR;;IACA,OAAOF,KAAK,KAAKd,KAAK,CAACiB,SAAhB,IAA6BH,KAAK,KAAK,IAAvC,GAA8C,CAACC,EAAE,GAAGf,KAAK,CAACiB,SAAZ,KAA0B,IAA1B,GAAiCF,EAAjC,GAAsC,IAApF,GAA2F,CAACC,EAAE,GAAGhB,KAAK,CAACkB,UAAZ,KAA2B,IAA3B,GAAkCF,EAAlC,GAAuC,KAAzI;EACD;;EACD,SAASG,eAAT,CAAyBC,OAAzB,EAAkCC,CAAlC,EAAqC;IACnCV,IAAI,CAAC,QAAD,EAAWE,eAAe,CAACO,OAAD,CAA1B,EAAqCC,CAArC,CAAJ;EACD;;EACD,SAASC,YAAT,CAAsBD,CAAtB,EAAyB;IACvB,IAAInB,eAAe,CAACY,KAApB,EACE;IACF,MAAMS,MAAM,GAAGF,CAAC,CAACE,MAAjB;IACAZ,IAAI,CAAC,QAAD,EAAWE,eAAe,CAACU,MAAM,CAACH,OAAR,CAA1B,EAA4CC,CAA5C,CAAJ;EACD;;EACD,eAAeG,WAAf,CAA2BH,CAA3B,EAA8B;IAC5B,IAAInB,eAAe,CAACY,KAApB,EACE;;IACF,IAAI,CAACX,WAAW,CAACW,KAAb,IAAsB,CAACV,UAAU,CAACU,KAAlC,IAA2CT,mBAAmB,CAACS,KAAnE,EAA0E;MACxE,MAAMW,YAAY,GAAGJ,CAAC,CAACK,YAAF,EAArB;MACA,MAAMC,QAAQ,GAAGF,YAAY,CAACG,IAAb,CAAmBC,IAAD,IAAUA,IAAI,CAACC,OAAL,KAAiB,OAA7C,CAAjB;;MACA,IAAI,CAACH,QAAL,EAAe;QACb1B,KAAK,CAACa,KAAN,GAAcD,eAAe,CAAC,CAAC,KAAD,EAAQb,KAAK,CAACkB,UAAd,EAA0Ba,QAA1B,CAAmC9B,KAAK,CAACa,KAAzC,CAAD,CAA7B;QACA,MAAMkB,QAAQ,EAAd;QACAb,eAAe,CAAClB,KAAK,CAACa,KAAP,EAAcO,CAAd,CAAf;MACD;IACF;EACF;;EACD,MAAMY,aAAa,GAAGC,QAAQ,CAAC,MAAM,CAAC5B,aAAa,IAAI,IAAjB,GAAwB,KAAK,CAA7B,GAAiCA,aAAa,CAAC2B,aAAhD,KAAkEjC,KAAK,CAACiC,aAA/E,CAA9B;EACAE,KAAK,CAAC,MAAMnC,KAAK,CAACoC,UAAb,EAAyB,MAAM;IAClC,IAAIH,aAAa,CAACnB,KAAlB,EAAyB;MACvBL,QAAQ,IAAI,IAAZ,GAAmB,KAAK,CAAxB,GAA4BA,QAAQ,CAAC4B,QAAT,CAAkB,QAAlB,EAA4BC,KAA5B,CAAmCC,GAAD,IAASC,SAAS,CAACD,GAAD,CAApD,CAA5B;IACD;EACF,CAJI,CAAL;EAKA,OAAO;IACLjB,YADK;IAELE;EAFK,CAAP;AAIF,CA9CY","names":["useCheckboxEvent","props","model","isLimitExceeded","hasOwnLabel","isDisabled","isLabeledByFormItem","checkboxGroup","inject","checkboxGroupContextKey","formItem","useFormItem","emit","getCurrentInstance","getLabeledValue","value","_a","_b","trueLabel","falseLabel","emitChangeEvent","checked","e","handleChange","target","onClickRoot","eventTargets","composedPath","hasLabel","some","item","tagName","includes","nextTick","validateEvent","computed","watch","modelValue","validate","catch","err","debugWarn"],"sources":["../../../../../../../packages/components/checkbox/src/composables/use-checkbox-event.ts"],"sourcesContent":["import { computed, getCurrentInstance, inject, nextTick, watch } from 'vue'\nimport { useFormItem } from '@element-plus/hooks'\nimport { checkboxGroupContextKey } from '@element-plus/tokens'\nimport { debugWarn } from '@element-plus/utils'\n\nimport type { useFormItemInputId } from '@element-plus/hooks'\nimport type { CheckboxProps } from '../checkbox'\nimport type {\n  CheckboxDisabled,\n  CheckboxModel,\n  CheckboxStatus,\n} from '../composables'\n\nexport const useCheckboxEvent = (\n  props: CheckboxProps,\n  {\n    model,\n    isLimitExceeded,\n    hasOwnLabel,\n    isDisabled,\n    isLabeledByFormItem,\n  }: Pick<CheckboxModel, 'model' | 'isLimitExceeded'> &\n    Pick<CheckboxStatus, 'hasOwnLabel'> &\n    Pick<CheckboxDisabled, 'isDisabled'> &\n    Pick<ReturnType<typeof useFormItemInputId>, 'isLabeledByFormItem'>\n) => {\n  const checkboxGroup = inject(checkboxGroupContextKey, undefined)\n  const { formItem } = useFormItem()\n  const { emit } = getCurrentInstance()!\n\n  function getLabeledValue(value: string | number | boolean) {\n    return value === props.trueLabel || value === true\n      ? props.trueLabel ?? true\n      : props.falseLabel ?? false\n  }\n\n  function emitChangeEvent(\n    checked: string | number | boolean,\n    e: InputEvent | MouseEvent\n  ) {\n    emit('change', getLabeledValue(checked), e)\n  }\n\n  function handleChange(e: Event) {\n    if (isLimitExceeded.value) return\n\n    const target = e.target as HTMLInputElement\n    emit('change', getLabeledValue(target.checked), e)\n  }\n\n  async function onClickRoot(e: MouseEvent) {\n    if (isLimitExceeded.value) return\n\n    if (!hasOwnLabel.value && !isDisabled.value && isLabeledByFormItem.value) {\n      // fix: https://github.com/element-plus/element-plus/issues/9981\n      const eventTargets: EventTarget[] = e.composedPath()\n      const hasLabel = eventTargets.some(\n        (item) => (item as HTMLElement).tagName === 'LABEL'\n      )\n      if (!hasLabel) {\n        model.value = getLabeledValue(\n          [false, props.falseLabel].includes(model.value)\n        )\n        await nextTick()\n        emitChangeEvent(model.value, e)\n      }\n    }\n  }\n\n  const validateEvent = computed(\n    () => checkboxGroup?.validateEvent || props.validateEvent\n  )\n\n  watch(\n    () => props.modelValue,\n    () => {\n      if (validateEvent.value) {\n        formItem?.validate('change').catch((err) => debugWarn(err))\n      }\n    }\n  )\n\n  return {\n    handleChange,\n    onClickRoot,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}