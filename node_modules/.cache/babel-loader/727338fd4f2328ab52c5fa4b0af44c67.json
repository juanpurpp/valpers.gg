{"ast":null,"code":"import { inject, ref, computed, toRaw } from 'vue';\nimport '../../../../hooks/index.mjs';\nimport '../../../../utils/index.mjs';\nimport '../../../../tokens/index.mjs';\nimport { checkboxGroupContextKey } from '../../../../tokens/checkbox.mjs';\nimport { isBoolean } from '@vueuse/core';\nimport { isArray } from '@vue/shared';\nimport { useSize } from '../../../../hooks/use-common-props/index.mjs';\n\nconst useCheckboxStatus = (props, slots, {\n  model\n}) => {\n  const checkboxGroup = inject(checkboxGroupContextKey, void 0);\n  const isFocused = ref(false);\n  const isChecked = computed(() => {\n    const value = model.value;\n\n    if (isBoolean(value)) {\n      return value;\n    } else if (isArray(value)) {\n      return value.map(toRaw).includes(props.label);\n    } else if (value !== null && value !== void 0) {\n      return value === props.trueLabel;\n    } else {\n      return !!value;\n    }\n  });\n  const checkboxButtonSize = useSize(computed(() => {\n    var _a;\n\n    return (_a = checkboxGroup == null ? void 0 : checkboxGroup.size) == null ? void 0 : _a.value;\n  }), {\n    prop: true\n  });\n  const checkboxSize = useSize(computed(() => {\n    var _a;\n\n    return (_a = checkboxGroup == null ? void 0 : checkboxGroup.size) == null ? void 0 : _a.value;\n  }));\n  const hasOwnLabel = computed(() => {\n    return !!(slots.default || props.label);\n  });\n  return {\n    checkboxButtonSize,\n    isChecked,\n    isFocused,\n    checkboxSize,\n    hasOwnLabel\n  };\n};\n\nexport { useCheckboxStatus };","map":{"version":3,"mappings":";;;;;;;;;AAIY,MAACA,iBAAiB,GAAG,CAACC,KAAD,EAAQC,KAAR,EAAe;EAAEC;AAAF,CAAf,KAA6B;EAC5D,MAAMC,aAAa,GAAGC,MAAM,CAACC,uBAAD,EAA0B,KAAK,CAA/B,CAA5B;EACA,MAAMC,SAAS,GAAGC,GAAG,CAAC,KAAD,CAArB;EACA,MAAMC,SAAS,GAAGC,QAAQ,CAAC,MAAM;IAC/B,MAAMC,KAAK,GAAGR,KAAK,CAACQ,KAApB;;IACA,IAAIC,SAAS,CAACD,KAAD,CAAb,EAAsB;MACpB,OAAOA,KAAP;IACD,CAFD,MAEO,IAAIE,OAAO,CAACF,KAAD,CAAX,EAAoB;MACzB,OAAOA,KAAK,CAACG,GAAN,CAAUC,KAAV,EAAiBC,QAAjB,CAA0Bf,KAAK,CAACgB,KAAhC,CAAP;IACD,CAFM,MAEA,IAAIN,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAArC,EAAwC;MAC7C,OAAOA,KAAK,KAAKV,KAAK,CAACiB,SAAvB;IACD,CAFM,MAEA;MACL,OAAO,CAAC,CAACP,KAAT;IACD;EACF,CAXyB,CAA1B;EAYA,MAAMQ,kBAAkB,GAAGC,OAAO,CAACV,QAAQ,CAAC,MAAM;IAChD,IAAIW,EAAJ;;IACA,OAAO,CAACA,EAAE,GAAGjB,aAAa,IAAI,IAAjB,GAAwB,KAAK,CAA7B,GAAiCA,aAAa,CAACkB,IAArD,KAA8D,IAA9D,GAAqE,KAAK,CAA1E,GAA8ED,EAAE,CAACV,KAAxF;EACD,CAH0C,CAAT,EAG9B;IACFY,IAAI,EAAE;EADJ,CAH8B,CAAlC;EAMA,MAAMC,YAAY,GAAGJ,OAAO,CAACV,QAAQ,CAAC,MAAM;IAC1C,IAAIW,EAAJ;;IACA,OAAO,CAACA,EAAE,GAAGjB,aAAa,IAAI,IAAjB,GAAwB,KAAK,CAA7B,GAAiCA,aAAa,CAACkB,IAArD,KAA8D,IAA9D,GAAqE,KAAK,CAA1E,GAA8ED,EAAE,CAACV,KAAxF;EACD,CAHoC,CAAT,CAA5B;EAIA,MAAMc,WAAW,GAAGf,QAAQ,CAAC,MAAM;IACjC,OAAO,CAAC,EAAER,KAAK,CAACwB,OAAN,IAAiBzB,KAAK,CAACgB,KAAzB,CAAR;EACD,CAF2B,CAA5B;EAGA,OAAO;IACLE,kBADK;IAELV,SAFK;IAGLF,SAHK;IAILiB,YAJK;IAKLC;EALK,CAAP;AAOF,CAnCY","names":["useCheckboxStatus","props","slots","model","checkboxGroup","inject","checkboxGroupContextKey","isFocused","ref","isChecked","computed","value","isBoolean","isArray","map","toRaw","includes","label","trueLabel","checkboxButtonSize","useSize","_a","size","prop","checkboxSize","hasOwnLabel","default"],"sources":["../../../../../../../packages/components/checkbox/src/composables/use-checkbox-status.ts"],"sourcesContent":["import { computed, inject, ref, toRaw } from 'vue'\nimport { useSize } from '@element-plus/hooks'\nimport { isArray, isBoolean } from '@element-plus/utils'\nimport { checkboxGroupContextKey } from '@element-plus/tokens'\n\nimport type { ComponentInternalInstance } from 'vue'\nimport type { CheckboxProps } from '../checkbox'\nimport type { CheckboxModel } from '../composables'\n\nexport const useCheckboxStatus = (\n  props: CheckboxProps,\n  slots: ComponentInternalInstance['slots'],\n  { model }: Pick<CheckboxModel, 'model'>\n) => {\n  const checkboxGroup = inject(checkboxGroupContextKey, undefined)\n  const isFocused = ref(false)\n  const isChecked = computed<boolean>(() => {\n    const value = model.value\n    if (isBoolean(value)) {\n      return value\n    } else if (isArray(value)) {\n      return value.map(toRaw).includes(props.label)\n    } else if (value !== null && value !== undefined) {\n      return value === props.trueLabel\n    } else {\n      return !!value\n    }\n  })\n\n  const checkboxButtonSize = useSize(\n    computed(() => checkboxGroup?.size?.value),\n    {\n      prop: true,\n    }\n  )\n  const checkboxSize = useSize(computed(() => checkboxGroup?.size?.value))\n\n  const hasOwnLabel = computed<boolean>(() => {\n    return !!(slots.default || props.label)\n  })\n\n  return {\n    checkboxButtonSize,\n    isChecked,\n    isFocused,\n    checkboxSize,\n    hasOwnLabel,\n  }\n}\n\nexport type CheckboxStatus = ReturnType<typeof useCheckboxStatus>\n"]},"metadata":{},"sourceType":"module"}