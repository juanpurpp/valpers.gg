{"ast":null,"code":"import { defineComponent, nextTick, computed, provide, toRefs, watch, openBlock, createBlock, resolveDynamicComponent, unref, normalizeClass, withCtx, renderSlot } from 'vue';\nimport { pick } from 'lodash-unified';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport { checkboxGroupProps, checkboxGroupEmits } from './checkbox-group.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useFormItem, useFormItemInputId } from '../../../hooks/use-form-item/index.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { checkboxGroupContextKey } from '../../../tokens/checkbox.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\n\nconst __default__ = defineComponent({\n  name: \"ElCheckboxGroup\"\n});\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: checkboxGroupProps,\n  emits: checkboxGroupEmits,\n\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"checkbox\");\n    const {\n      formItem\n    } = useFormItem();\n    const {\n      inputId: groupId,\n      isLabeledByFormItem\n    } = useFormItemInputId(props, {\n      formItemContext: formItem\n    });\n\n    const changeEvent = async value => {\n      emit(UPDATE_MODEL_EVENT, value);\n      await nextTick();\n      emit(\"change\", value);\n    };\n\n    const modelValue = computed({\n      get() {\n        return props.modelValue;\n      },\n\n      set(val) {\n        changeEvent(val);\n      }\n\n    });\n    provide(checkboxGroupContextKey, { ...pick(toRefs(props), [\"size\", \"min\", \"max\", \"disabled\", \"validateEvent\", \"fill\", \"textColor\"]),\n      modelValue,\n      changeEvent\n    });\n    watch(() => props.modelValue, () => {\n      if (props.validateEvent) {\n        formItem == null ? void 0 : formItem.validate(\"change\").catch(err => debugWarn(err));\n      }\n    });\n    return (_ctx, _cache) => {\n      var _a;\n\n      return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {\n        id: unref(groupId),\n        class: normalizeClass(unref(ns).b(\"group\")),\n        role: \"group\",\n        \"aria-label\": !unref(isLabeledByFormItem) ? _ctx.label || \"checkbox-group\" : void 0,\n        \"aria-labelledby\": unref(isLabeledByFormItem) ? (_a = unref(formItem)) == null ? void 0 : _a.labelId : void 0\n      }, {\n        default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n        _: 3\n      }, 8, [\"id\", \"class\", \"aria-label\", \"aria-labelledby\"]);\n    };\n  }\n\n});\n\nvar CheckboxGroup = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox-group.vue\"]]);\n\nexport { CheckboxGroup as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;mCA4Bc;EACZA,IAAM;AADM;;;;;;;;;;IAMR,WAAKC,aAAa,UAAb,CAAL;IAEA;MAAEC;IAAF,IAAeC,WAAY,EAA3B;IACN,MAAM;MAAEC,SAASC,OAAX;MAAoBC;IAApB,IAA4CC,mBAAmBC,KAAnB,EAA0B;MAC1EC,eAAiB;IADyD,CAA1B,CAAlD;;IAIM,oBAAc,MAAOC,KAAP,IAAsC;MACxDC,KAAKC,kBAAL,EAAyBF,KAAzB;MACA,MAAMG,QAAS,EAAf;MACAF,KAAK,QAAL,EAAeD,KAAf;IACF,CAJM;;IAMN,MAAMI,aAAaC,QAAS;MAC1BC,GAAM;QACJ,OAAOR,KAAM,WAAb;MACF,CAH0B;;MAI1BS,IAAIC,GAAJ,EAA8B;QAC5BC,YAAYD,GAAZ;MACF;;IAN0B,EAA5B;IASAE,QAAQC,uBAAR,EAAiC,EAC/B,GAAGC,KAAKC,MAAO,OAAZ,EAAoB,CACrB,MADqB,EAErB,KAFqB,EAGrB,KAHqB,EAIrB,UAJqB,EAKrB,eALqB,EAMrB,MANqB,EAOrB,WAPqB,CAApB,CAD4B;MAU/BT,UAV+B;MAW/BK;IAX+B,CAAjC;IAeEK,YAAMhB,KAAM,WAAZ,EACA,MAAM;MACJ,IAAIA,MAAMiB,aAAV,EAAyB;QACbvB,mBAAS,MAAT,GAAmBA,QAAO,CAAQwB,QAAf,CAAe,QAAf,EAAyBC,KAAzB,CAA6BC,qBAA7B,CAAnB;MACZ;IAEJ,CANE","names":["name","useNamespace","formItem","useFormItem","inputId","groupId","isLabeledByFormItem","useFormItemInputId","props","formItemContext","value","emit","UPDATE_MODEL_EVENT","nextTick","modelValue","computed","get","set","val","changeEvent","provide","checkboxGroupContextKey","pick","toRefs","watch","validateEvent","validate","catch","err"],"sources":["../../../../../../packages/components/checkbox/src/checkbox-group.vue"],"sourcesContent":["<template>\n  <component\n    :is=\"tag\"\n    :id=\"groupId\"\n    :class=\"ns.b('group')\"\n    role=\"group\"\n    :aria-label=\"!isLabeledByFormItem ? label || 'checkbox-group' : undefined\"\n    :aria-labelledby=\"isLabeledByFormItem ? formItem?.labelId : undefined\"\n  >\n    <slot />\n  </component>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, nextTick, provide, toRefs, watch } from 'vue'\nimport { pick } from 'lodash-unified'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { debugWarn } from '@element-plus/utils'\nimport {\n  useFormItem,\n  useFormItemInputId,\n  useNamespace,\n} from '@element-plus/hooks'\nimport { checkboxGroupContextKey } from '@element-plus/tokens'\nimport { checkboxGroupEmits, checkboxGroupProps } from './checkbox-group'\n\nimport type { CheckboxValueType } from './checkbox'\n\ndefineOptions({\n  name: 'ElCheckboxGroup',\n})\n\nconst props = defineProps(checkboxGroupProps)\nconst emit = defineEmits(checkboxGroupEmits)\nconst ns = useNamespace('checkbox')\n\nconst { formItem } = useFormItem()\nconst { inputId: groupId, isLabeledByFormItem } = useFormItemInputId(props, {\n  formItemContext: formItem,\n})\n\nconst changeEvent = async (value: CheckboxValueType[]) => {\n  emit(UPDATE_MODEL_EVENT, value)\n  await nextTick()\n  emit('change', value)\n}\n\nconst modelValue = computed({\n  get() {\n    return props.modelValue\n  },\n  set(val: CheckboxValueType[]) {\n    changeEvent(val)\n  },\n})\n\nprovide(checkboxGroupContextKey, {\n  ...pick(toRefs(props), [\n    'size',\n    'min',\n    'max',\n    'disabled',\n    'validateEvent',\n    'fill',\n    'textColor',\n  ]),\n  modelValue,\n  changeEvent,\n})\n\nwatch(\n  () => props.modelValue,\n  () => {\n    if (props.validateEvent) {\n      formItem?.validate('change').catch((err) => debugWarn(err))\n    }\n  }\n)\n</script>\n"]},"metadata":{},"sourceType":"module"}