{"ast":null,"code":"import { isNil } from 'lodash-unified';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../constants/index.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props/runtime.mjs';\nimport { useSizeProp } from '../../../hooks/use-common-props/index.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { isString } from '@vue/shared';\nconst colorPickerProps = buildProps({\n  modelValue: String,\n  id: String,\n  showAlpha: Boolean,\n  colorFormat: String,\n  disabled: Boolean,\n  size: useSizeProp,\n  popperClass: {\n    type: String,\n    default: \"\"\n  },\n  label: {\n    type: String,\n    default: void 0\n  },\n  tabindex: {\n    type: [String, Number],\n    default: 0\n  },\n  predefine: {\n    type: definePropType(Array)\n  },\n  validateEvent: {\n    type: Boolean,\n    default: true\n  }\n});\nconst colorPickerEmits = {\n  [UPDATE_MODEL_EVENT]: val => isString(val) || isNil(val),\n  [CHANGE_EVENT]: val => isString(val) || isNil(val),\n  activeChange: val => isString(val) || isNil(val)\n};\nconst colorPickerContextKey = Symbol(\"colorPickerContextKey\");\nexport { colorPickerContextKey, colorPickerEmits, colorPickerProps };","map":{"version":3,"mappings":";;;;;;;;AAIY,MAACA,gBAAgB,GAAGC,UAAU,CAAC;EACzCC,UAAU,EAAEC,MAD6B;EAEzCC,EAAE,EAAED,MAFqC;EAGzCE,SAAS,EAAEC,OAH8B;EAIzCC,WAAW,EAAEJ,MAJ4B;EAKzCK,QAAQ,EAAEF,OAL+B;EAMzCG,IAAI,EAAEC,WANmC;EAOzCC,WAAW,EAAE;IACXC,IAAI,EAAET,MADK;IAEXU,OAAO,EAAE;EAFE,CAP4B;EAWzCC,KAAK,EAAE;IACLF,IAAI,EAAET,MADD;IAELU,OAAO,EAAE,KAAK;EAFT,CAXkC;EAezCE,QAAQ,EAAE;IACRH,IAAI,EAAE,CAACT,MAAD,EAASa,MAAT,CADE;IAERH,OAAO,EAAE;EAFD,CAf+B;EAmBzCI,SAAS,EAAE;IACTL,IAAI,EAAEM,cAAc,CAACC,KAAD;EADX,CAnB8B;EAsBzCC,aAAa,EAAE;IACbR,IAAI,EAAEN,OADO;IAEbO,OAAO,EAAE;EAFI;AAtB0B,CAAD,CAA9B;AA2BA,MAACQ,gBAAgB,GAAG;EAC9B,CAACC,kBAAD,GAAuBC,GAAD,IAASC,QAAQ,CAACD,GAAD,CAAR,IAAiBE,KAAK,CAACF,GAAD,CADvB;EAE9B,CAACG,YAAD,GAAiBH,GAAD,IAASC,QAAQ,CAACD,GAAD,CAAR,IAAiBE,KAAK,CAACF,GAAD,CAFjB;EAG9BI,YAAY,EAAGJ,GAAD,IAASC,QAAQ,CAACD,GAAD,CAAR,IAAiBE,KAAK,CAACF,GAAD;AAHf,CAApB;AAKA,MAACK,qBAAqB,GAAGC,MAAM,CAAC,uBAAD,CAA/B","names":["colorPickerProps","buildProps","modelValue","String","id","showAlpha","Boolean","colorFormat","disabled","size","useSizeProp","popperClass","type","default","label","tabindex","Number","predefine","definePropType","Array","validateEvent","colorPickerEmits","UPDATE_MODEL_EVENT","val","isString","isNil","CHANGE_EVENT","activeChange","colorPickerContextKey","Symbol"],"sources":["../../../../../../packages/components/color-picker/src/color-picker.ts"],"sourcesContent":["import { isNil } from 'lodash-unified'\nimport { buildProps, definePropType, isString } from '@element-plus/utils'\nimport { useSizeProp } from '@element-plus/hooks'\nimport { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '@element-plus/constants'\n\nimport type { ComputedRef, ExtractPropTypes, InjectionKey } from 'vue'\nimport type ColorPicker from './color-picker.vue'\n\nexport const colorPickerProps = buildProps({\n  modelValue: String,\n  id: String,\n  showAlpha: Boolean,\n  colorFormat: String,\n  disabled: Boolean,\n  size: useSizeProp,\n  popperClass: {\n    type: String,\n    default: '',\n  },\n  label: {\n    type: String,\n    default: undefined,\n  },\n  tabindex: {\n    type: [String, Number],\n    default: 0,\n  },\n  predefine: {\n    type: definePropType<string[]>(Array),\n  },\n  validateEvent: {\n    type: Boolean,\n    default: true,\n  },\n} as const)\nexport const colorPickerEmits = {\n  [UPDATE_MODEL_EVENT]: (val: string | null) => isString(val) || isNil(val),\n  [CHANGE_EVENT]: (val: string | null) => isString(val) || isNil(val),\n  activeChange: (val: string | null) => isString(val) || isNil(val),\n}\n\nexport type ColorPickerProps = ExtractPropTypes<typeof colorPickerProps>\nexport type ColorPickerEmits = typeof colorPickerEmits\nexport type ColorPickerInstance = InstanceType<typeof ColorPicker>\n\nexport interface ColorPickerContext {\n  currentColor: ComputedRef<string>\n}\n\nexport const colorPickerContextKey: InjectionKey<ColorPickerContext> = Symbol(\n  'colorPickerContextKey'\n)\n"]},"metadata":{},"sourceType":"module"}